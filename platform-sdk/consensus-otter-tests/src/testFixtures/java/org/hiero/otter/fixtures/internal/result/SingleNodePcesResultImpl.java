// SPDX-License-Identifier: Apache-2.0
package org.hiero.otter.fixtures.internal.result;

import static com.swirlds.platform.event.preconsensus.PcesFileManager.NO_LOWER_BOUND;
import static com.swirlds.platform.event.preconsensus.PcesUtilities.getDatabaseDirectory;

import com.swirlds.common.context.PlatformContext;
import com.swirlds.config.api.Configuration;
import com.swirlds.platform.event.preconsensus.PcesConfig;
import com.swirlds.platform.event.preconsensus.PcesFile;
import com.swirlds.platform.event.preconsensus.PcesFileReader;
import com.swirlds.platform.event.preconsensus.PcesFileTracker;
import com.swirlds.platform.event.preconsensus.PcesMultiFileIterator;
import edu.umd.cs.findbugs.annotations.NonNull;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Path;
import java.util.Iterator;
import org.hiero.consensus.model.node.NodeId;
import org.hiero.otter.fixtures.result.SingleNodePcesResult;

/**
 * An implementation of {@link SingleNodePcesResult} that provides access to a group of related PCES files that were
 * generated by a single node.
 */
public class SingleNodePcesResultImpl implements SingleNodePcesResult {

    private final long nodeId;
    private final PcesFileTracker pcesFileTracker;

    /**
     * Constructor for {@code PcesFilesResultImpl}.
     *
     * @param nodeId The {@link NodeId} of the files' node
     * @param platformContext The {@link PlatformContext} to use for file reading
     */
    public SingleNodePcesResultImpl(long nodeId, @NonNull final PlatformContext platformContext) {
        this.nodeId = nodeId;

        final Configuration configuration = platformContext.getConfiguration();
        final PcesConfig pcesConfig = configuration.getConfigData(PcesConfig.class);

        try {

            final Path databaseDirectory = getDatabaseDirectory(platformContext, NodeId.of(nodeId));

            this.pcesFileTracker = PcesFileReader.readFilesFromDisk(
                    platformContext, databaseDirectory, NO_LOWER_BOUND, pcesConfig.permitGaps());
        } catch (final IOException e) {
            throw new UncheckedIOException("Error initializing SingleNodePcesResultImpl", e);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nodeId() {
        return nodeId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @NonNull
    public Iterator<PcesFile> pcesFiles() {
        return pcesFileTracker.getFileIterator();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @NonNull
    public PcesMultiFileIterator pcesEvents() {
        return new PcesMultiFileIterator(NO_LOWER_BOUND, pcesFiles());
    }
}
