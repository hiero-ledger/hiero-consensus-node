/**
 * # PlatformState
 * Messages that hold platform state in the network state.
 *
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119)
 * and clarified in [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.platform.state;

// SPDX-License-Identifier: Apache-2.0
option java_package = "com.hedera.hapi.platform.state.legacy";
// <<<pbj.java_package = "com.hedera.hapi.platform.state">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "services/timestamp.proto";
import "services/basic_types.proto";
import "services/exchange_rate.proto";
import "services/auxiliary/hints/crs_publication.proto";
import "services/auxiliary/tss/tss_message.proto";
import "services/auxiliary/tss/tss_vote.proto";
import "platform/state/platform_state.proto";
import "services/state/primitives.proto";
import "services/state/common.proto";
import "services/state/addressbook/node.proto";
import "services/state/blockrecords/block_info.proto";
import "services/state/blockrecords/running_hashes.proto";
import "services/state/blockstream/block_stream_info.proto";
import "services/state/congestion/congestion_level_starts.proto";
import "services/state/consensus/topic.proto";
import "services/state/contract/bytecode.proto";
import "services/state/contract/storage_slot.proto";
import "services/state/entity/entity_counts.proto";
import "services/state/file/file.proto";
import "services/state/hints/hints_types.proto";
import "services/state/history/history_types.proto";
import "services/state/recordcache/recordcache.proto";
import "services/state/roster/roster.proto";
import "services/state/roster/roster_state.proto";
import "services/state/schedule/schedule.proto";
import "services/state/throttles/throttle_usage_snapshots.proto";
import "services/state/token/account.proto";
import "services/state/token/account_pending_airdrop.proto";
import "services/state/token/network_staking_rewards.proto";
import "services/state/token/node_rewards.proto";
import "services/state/token/nft.proto";
import "services/state/token/staking_node_info.proto";
import "services/state/token/token.proto";
import "services/state/token/token_relation.proto";
import "services/state/tss/tss_encryption_keys.proto";
import "services/state/tss/tss_message_map_key.proto";
import "services/state/tss/tss_vote_map_key.proto";

/**
 * TBD
 */
message VirtualMapKey {
  oneof key {
    SingletonType singleton = 1;

    // Key/value states
    /**
     * A state identifier for the Accounts state. 
     */
    proto.AccountID TokenServiceACCOUNTS = 2;

    /**
     * A state identifier for account aliases. 
     */
    proto.ProtoBytes TokenServiceALIASES = 3;

    /**
     * A state identifier for contract storage slots. 
     */
    proto.SlotKey ContractServiceSTORAGE = 4;

    /**
     * A state identifier for contract bytecode. 
     */
    proto.ContractID ContractServiceBYTECODE = 5;

    /**
     * A state identifier for Hedera File Service (HFS). 
     */    
    proto.FileID FileServiceFILES = 6;

    /**
     * A state identifier for Hedera Token Service (HTS). 
     */    
    proto.TokenID TokenServiceTOKENS = 7;

    /**
     * A state identifier for non-fungible/unique tokens. 
     */    
    proto.NftID TokenServiceNFTS = 8;

    /**
     * A state identifier for token relationships. 
     */
    proto.EntityIDPair TokenServiceTOKEN_RELS = 9;

    /**
     * A state identifier for network staking information. 
     */
    proto.EntityNumber TokenServiceSTAKING_INFOS = 10;

    /**
     * A state identifier for scheduled transactions. 
     */
    proto.ScheduleID ScheduleServiceSCHEDULES_BY_ID = 14;

    /**
     * A state identifier for scheduled transaction expiration. 
     */
    proto.ProtoLong ScheduleServiceSCHEDULES_BY_EXPIRY_SEC = 15;

    /**
     * A state identifier for scheduled transaction deduplication. 
     */
    proto.ProtoBytes ScheduleServiceSCHEDULES_BY_EQUALITY = 16;

    /**
     * A state identifier for address book nodes. 
     */
    proto.EntityNumber AddressBookServiceNODES = 20;

    /**
     * A state identifier for the Topics state. 
     */
    proto.TopicID ConsensusServiceTOPICS = 21;

    /**
     * A state identifier for pending airdrops. 
     */
    proto.PendingAirdropId TokenServicePENDING_AIRDROPS = 25;

    /**
     * A state identifier for the rosters. 
     */
    proto.ProtoBytes RosterServiceROSTERS = 28;

    /**
    * A state identifier for counts of transactions scheduled and
    * processed in a second. 
    */
    proto.TimestampSeconds ScheduleServiceSCHEDULED_COUNTS = 29;

    /**
     * A state identifier for scheduled transaction deduplication. 
     */
    proto.ProtoBytes ScheduleServiceSCHEDULE_ID_BY_EQUALITY = 30;

    /**
     * A state identifier for TSS messages. 
     */    
    com.hedera.hapi.node.state.tss.TssMessageMapKey TssBaseServiceTSS_MESSAGES = 31;

    /**
     * A state identifier for TSS votes. 
     */    
    com.hedera.hapi.node.state.tss.TssVoteMapKey TssBaseServiceTSS_VOTES = 32;
    
    /**
    * A state identifier for the ordering of scheduled transactions. 
    */    
    proto.ScheduledOrder ScheduleServiceSCHEDULED_ORDERS = 33;

    /**
     * A state identifier for scheduled throttle usage snapshots. 
     */    
    proto.TimestampSeconds ScheduleServiceSCHEDULED_USAGES = 34;

    /**
     * A state identifier for the TSS encryption keys. 
     */    
    proto.EntityNumber TssBaseServiceTSS_ENCRYPTION_KEY = 35;

    /**
     * A state identifier for hinTS key sets. 
     */    
    com.hedera.hapi.node.state.hints.HintsPartyId HintsServiceHINTS_KEY_SETS = 37;

    /**
     * A state identifier for hinTS preprocessing output votes. 
     */    
    com.hedera.hapi.node.state.hints.PreprocessingVoteId HintsServicePREPROCESSING_VOTES = 40;

    /**
     * A state identifier for history proof key sets. 
     */    
    com.hedera.hapi.platform.state.NodeId HistoryServicePROOF_KEY_SETS = 43;

    /**
     * A state identifier for signatures on roster transition histories. 
     */    
    com.hedera.hapi.node.state.history.ConstructionNodeId HistoryServiceHISTORY_SIGNATURES = 46;

    /**
     * A state identifier for votes on history proofs. 
     */    
    com.hedera.hapi.node.state.history.ConstructionNodeId HistoryServicePROOF_VOTES = 47;

    /**
     * A state identifier for the CRS publications. 
     */    
    com.hedera.hapi.platform.state.NodeId HintsServiceCRS_PUBLICATIONS = 49;

    // Queue states
    /**
     * Queue index for the round receipts queue.
     */
    uint64 RecordCacheTransactionReceiptQueue = 126;
    
    /**
     * Queue index for the `150` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_150 = 10001;
    
    /**
     * Queue index for the `151` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_151 = 10002;

    /**
     * Queue index for the `152` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_152 = 10003;

    /**
     * Queue index for the `153` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_153 = 10004;

    /**
     * Queue index for the `154` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_154 = 10005;

    /**
     * Queue index for the `155` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_155 = 10006;

    /**
     * Queue index for the `156` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_156 = 10007;

    /**
     * Queue index for the `157` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_157 = 10008;

    /**
     * Queue index for the `158` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_158 = 10009;

    /**
     * Queue index for the `159` upgrade file data.
     */
    uint64 FileServiceUPGRADE_DATA_159 = 10010;

  }
}

enum SingletonType {
  /**
   * An "unset value" flag, this value SHALL NOT be used.<br/>
   * This status indicates the server software failed to set a
   * status, and SHALL be considered a software defect.
   */
  UNKNOWN = 0;

  /**
   * A state identifier for the next entity Identifier.
   */
  EntityIdServiceENTITY_ID = 1;

  /**
   * A state identifier for network staking rewards.
   */
  TokenServiceSTAKING_NETWORK_REWARDS = 11;

  /**
   * A state identifier for throttle usage.
   */
  CongestionThrottleServiceTHROTTLE_USAGE_SNAPSHOTS = 12;

  /**
   * A state identifier for network congestion start times.
   */
  CongestionThrottleServiceCONGESTION_LEVEL_STARTS = 13;

  /**
   * A state identifier for conversion rate updates.
   */
  FeeServiceMIDNIGHT_RATES = 17;

  /**
   * A state identifier for the network running hash(es).
   */
  BlockRecordServiceRUNNING_HASHES = 18;

  /**
   * A state identifier for network block information.
   */
  BlockRecordServiceBLOCKS = 19;

  /**
   * A state identifier for the hash of the next "upgrade" file.
   */
  FreezeServiceUPGRADE_FILE_HASH = 22;

  /**
   * A state identifier for the next network freeze time. Singleton state.
   */
  FreezeServiceFREEZE_TIME = 23;

  /**
   * A state identifier for the block stream status. Singleton state.
   */
  BlockStreamServiceBLOCK_STREAM_INFO = 24;

  /**
   * A state identifier for the platform state. Singleton state.
   */
  PlatformStateServicePLATFORM_STATE = 26;
  
  /**
   * A state identifier for the roster state. Singleton state.
   */
  RosterServiceROSTER_STATE = 27;

  /**
   * A state identifier for the active hinTS construction. Singleton state.
   */
  HintsServiceACTIVE_HINTS_CONSTRUCTION = 38;
  
  /**
   * A state identifier for the next hinTS construction. Singleton state.
   */
  HintsServiceNEXT_HINTS_CONSTRUCTION = 39;

  /**
   * A state identifier for the entity counts. Singleton state.
   */
  EntityIdServiceENTITY_COUNTS = 41;

  /**
   * A state identifier for the ledger id. Singleton state.
   */
  HistoryServiceLEDGER_ID = 42;

  /**
   * A state identifier for the active proof construction. Singleton state.
   */
  HistoryServiceACTIVE_PROOF_CONSTRUCTION = 44;

  /**
   * A state identifier for the next proof construction. Singleton state.
   */
  HistoryServiceNEXT_PROOF_CONSTRUCTION = 45;

  /**
   * A state identifier for the CRS state. Singleton state.
   */
  HintsServiceCRS_STATE = 48;

  /**
   * A state identifier for the node rewards. Singleton state.
   */
  TokenServiceNODE_REWARDS = 50;

  /**
   * Virtual Map State metadata
   */
  VIRTUAL_MAP_STATE = 51;

  // Queue metadata

  /**
   * Metadata of the round receipts queue.
   */
  RecordCacheTransactionReceiptQueue = 126;
  
  /**
   * Metadata of the `150` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_150 = 10001;

  /**
   * Metadata of the`151` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_151 = 10002;

  /**
   * Metadata of the `152` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_152 = 10003;

  /**
   * Metadata of the `153` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_153 = 10004;

  /**
   * Metadata of the`154` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_154 = 10005;

  /**
   * Metadata of the `155` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_155 = 10006;

  /**
   * Metadata of the `156` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_156 = 10007;

  /**
   * Metadata of the `157` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_157 = 10008;

  /**
   * Metadata of the `158` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_158 = 10009;

  /**
   * Metadata of the `159` upgrade file data queue.
   */
  FileServiceUPGRADE_DATA_159 = 10010;

}