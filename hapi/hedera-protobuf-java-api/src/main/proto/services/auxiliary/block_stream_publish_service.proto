// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

package com.hedera.hapi.services.auxiliary;

option java_package = "com.hedera.hapi.services.auxiliary.legacy";
// <<<pbj.java_package = "com.hedera.hapi.services.auxiliary">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "block/shared_message_types.proto";

/**
 * Publish a stream of block items.
 *
 * Each request in the stream MUST contain at least one `BlockItem`.<br/>
 * Each request MAY contain more than one `BlockItem`.<br/>
 * A single request MUST NOT contain `BlockItem`s from more than one block.<br/>
 * Each request MAY contain a variable number of `BlockItem`s.<br/>
 * Each Block MUST begin with a single `BlockHeader` block item.<br/>
 * If a `BlockHeader` is present in a request, it MUST be the first `BlockItem`
 * in the `block_items` list.<br/>
 * The Block-Node SHALL append each `BlockItem` to an internal structure
 * to reconstruct full blocks.<br/>
 * The Block-Node MUST verify the block proof for each block before sending a
 * response message acknowledging that block.<br/>
 * Each Block MUST end with a single `BlockProof` block item.<br/>
 * If a `BlockProof` is present in a request, it MUST be the last `BlockItem`
 * in the `block_items` list.<br/>
 * The Block-Node MUST verify each Block using the `BlockProof` to
 * ensure all data was received and processed correctly.
 */
message PassThroughPublishStreamRequest {
  oneof request {
    /**
     * A stream item containing one or more `BlockItem`s.
     * <p>
     * The full stream SHALL consist of many `block_items` messages
     * followed by a single `status` message.
     */
    org.hiero.block.api.PassThroughBlockItemSet block_items = 1;

    /**
     * A message when the Publisher is deliberately ending the stream.<br/>
     * <p>
     * This message SHALL be sent exactly once for each `publishBlockStream`
     * call.<br/>
     * The Publisher SHALL cease sending block items and close the gRPC
     * connection after sending this message.<br/>
     * The Publisher MUST fill in the earliest and latest block numbers
     * when sending this message for any non-error condition.
     */
    EndStream end_stream = 2;
  }

  /**
   * A message sent to end a stream.
   *
   * This request message SHALL be sent from a Publisher to a Block-Node
   * when a `publishBlockStream` stream ends in an orderly manner.<br/>
   * This message SHALL be sent exactly once for each `publishBlockStream`
   * call.<br/>
   * The Publisher SHALL cease sending block items after sending
   * this request, and SHALL express the ending state of the stream with
   * the `status` enumeration.<br/>
   * A Publisher SHALL include the `earliest_block_number` and
   * `latest_block_number` values when sending this message for any
   * non-error condition.
   */
  message EndStream {
    // Note: MUST NOT name this `EndOfStream`, a PBJ bug in automatic unit
    //       test generation will attempt to convert this inner enum to the
    //       inner enum of the `Response` `EndOfStream` message, resulting
    //       in compilation errors. This bug will even attempt to convert
    //       the enums if the enums are not named the same.

    /**
     * A stream end code.
     * This code indicates the reason the stream ended.<br/>
     * <p>
     * This value MUST be set to a non-default value.
     */
    Code end_code = 1;

    /**
     * The number of the _earliest_ block available from the Publisher.
     * <p>
     * This value SHALL be set to the earliest block number available from
     * this Publisher.<br/>
     * This value MUST be set unless the stream `end_code`
     * is `ERROR`.
     */
    uint64 earliest_block_number = 2;

    /**
     * The number of the _latest_ block available from the Publisher.<br/>
     * This is the last _acknowledged_ block, not the last block produced.
     * <p>
     * This value SHALL be set to the latest block number available from
     * this Publisher.<br/>
     * This value MUST be set unless the stream `end_code`
     * is `ERROR`.
     */
    uint64 latest_block_number = 3;

    /**
     * An enumeration indicating why a Publisher ended a stream.
     *
     * This enumeration describes the reason a block stream
     * (sent via `publishBlockStream`) was ended by the Publisher.
     */
    enum Code {
      /**
       * An "unset value" flag, this value SHALL NOT be used.<br/>
       * This status indicates the server software failed to set a
       * status, and SHALL be considered a software defect.
       */
      UNKNOWN = 0;

      /**
       * The Publisher reached a reset point.<br/>
       * No errors occurred and the source Publisher orderly ended
       * the stream.
       * <p>
       * Publishers SHOULD use this code to end a stream and restart
       * occasionally. Occasionally resetting the stream increases
       * stability and allows for routine network configuration changes.
       */
      RESET = 1;

      /**
       * The delay between items was too long.<br/>
       * The destination system did not timely acknowledge a block.
       * <p>
       * The source SHALL start a new stream before the failed block.
       */
      TIMEOUT = 2;

      /**
       * The Publisher encountered an error.<br/>
       * The Publisher encountered an internal error and must try
       * again later.
       * <p>
       * Publishers that encounter internal logic errors, find themselves
       * "behind" the network, or otherwise detect an unexpected
       * situation MUST send this code and restart the stream before
       * the failed block.
       */
      ERROR = 3;

      /**
       * The Block-Node is too far behind to catch up directly.<br/>
       * The Block-Node responded to a block header with "BEHIND" and is
       * too far behind the Publisher.
       * <p>
       * The Block-Node MUST recover and "catch up" from another
       * trustworthy Block-Node.<br/>
       * The Publisher MAY stream items to a different Block-Node.<br/>
       * The Publisher MAY resume streaming to this Block-Node later.<br/>
       * The `EndOfStream` message MUST include the earliest and latest
       * blocks currently available from the Publisher.<br/>
       * The Block-Node SHOULD attempt to "catch up" to the _latest_ block
       * available from the Publisher.
       */
      TOO_FAR_BEHIND = 4;
    }
  }
}