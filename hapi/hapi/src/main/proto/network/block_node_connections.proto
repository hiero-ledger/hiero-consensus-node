/**
 * # Block Node Connections
 * A representation of the configuration for connecting to a set of block nodes.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */

syntax = "proto3";

package com.hedera.hapi.network;

option java_package = "com.hedera.node.internal.network.legacy";
// <<<pbj.java_package = "com.hedera.node.internal.network">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "google/protobuf/wrappers.proto";

/**
 * A single block node connection configuration.<br/>
 *
 * This message provides the necessary details for a consensus node to
 * establish a connection and stream blocks to a block node.</br>
 * Each instance of this message represents one block node connection.
 * Multiple instances may be included in {@link BlockNodeConnectionInfo}.
 * - Each instance SHALL contain a valid address and port.<br/>
 * - A consensus node SHALL connect to all listed block nodes.<br/>
 * - The address MUST be a valid DNS hostname or IP address.<br/>
 * - The port SHALL be within the valid TCP/UDP port range.<br/>
 */
message BlockNodeConfig {
    /**
     * The network address of the block node.<br/>
     * This MAY be an IP address or a DNS hostname.
     */
    string address = 1;

    /**
     * The port of the block node.<br/>
     * Valid port range is 1 to 65535.
     */
    int32 port = 2;

  /**
   * The priority of the block node.<br/>
   * A lower number indicates a higher priority (e.g., priority 1 is highest).
   * <p>
   * This field SHALL be strictly positive.<br/>
   * Priority MAY be unique, or shared with multiple nodes. Nodes with the same
   * priority belong to the same priority group.<br/>
   * In choosing which connections to establish and maintain, the consensus node
   * SHALL prefer the highest-priority block node(s) over any belonging to
   * a lower priority group.<br/>
   * If all nodes in the highest priority group are unresponsive, the consensus
   * node SHALL connect to a node in the next-highest available priority group.
   */
    int32 priority = 3;

    /**
     * Optional HTTP/2 client protocol configuration for this block node connection.
     * If present, these settings SHALL override defaults when creating the WebClient.
     */
    Http2ClientProtocolConfig http2ClientProtocolConfig = 4;

    /**
     * Optional Grpc client protocol configuration for this block node connection.
     * If present, these settings SHALL override defaults when creating the WebClient.
     */
    GrpcClientProtocolConfig grpcClientProtocolConfig = 5;

    /**
     * Optional maximum message size in bytes that the client will send to the block node.
     * If present, this value SHALL override the default maximum message size.
     */
    google.protobuf.UInt32Value maxMessageSizeBytes = 6;
}


/**
 * Optional HTTP/2 client protocol configuration for a specific block node connection.
 * If present, these values SHALL be used to configure the HTTP/2 protocol for the WebClient connecting
 * to the corresponding block node.
 */
message Http2ClientProtocolConfig {
  /**
   * Timeout for blocking while waiting for window update when window is depleted.
   * ISO-8601 duration string (e.g., "PT15S").
   */
  google.protobuf.StringValue flow_control_block_timeout = 1;

  /**
   * Configure INITIAL_WINDOW_SIZE setting for new HTTP/2 connections.
   */
  google.protobuf.Int32Value initial_window_size = 2;

  /**
   * Configure initial MAX_FRAME_SIZE setting for new HTTP/2 connections.
   */
  google.protobuf.Int32Value max_frame_size = 3;

  /**
   * Configure initial MAX_HEADER_LIST_SIZE setting for new HTTP/2 connections.
   */
  google.protobuf.Int64Value max_header_list_size = 4;

  /**
   * Name of this HTTP/2 protocol configuration. Default is "h2".
   */
  google.protobuf.StringValue name = 5;

  /**
   * Check healthiness of cached connections with HTTP/2.0 ping frame.
   */
  google.protobuf.BoolValue ping = 6;

  /**
   * Timeout for ping probe used for checking healthiness of cached connections.
   * ISO-8601 duration string (e.g., "PT0.5S").
   */
  google.protobuf.StringValue ping_timeout = 7;

  /**
   * Prior knowledge of HTTP/2 capabilities of the server.
   */
  google.protobuf.BoolValue prior_knowledge = 8;
}

message GrpcClientProtocolConfig {
  /**
   * Whether to continue retrying after a poll wait timeout expired or not. If a read operation timeouts out and this
   * flag is set to false, the event is logged and the client will retry. Otherwise, an exception is thrown.
   */
  google.protobuf.BoolValue abort_poll_time_expired = 1;

  /**
   * How often to send a heartbeat (HTTP/2 ping) to check if the connection is still alive. This is useful for
   * long-running, streaming gRPC calls. It is turned off by default but can be enabled by setting the period to a value
   * greater than 0. ISO-8601 duration string (e.g., "PT0S").
   */
  google.protobuf.StringValue heartbeat_period = 2;

  /**
   * Initial buffer size used to serialize gRPC request payloads. Buffers shall grow according to the payload size, but
   * setting this initial buffer size to a larger value may improve performance for certain applications.
   */
  google.protobuf.Int32Value init_buffer_size = 3;

  /**
   * Name identifying this client protocol. Defaults to type.
   */
  google.protobuf.StringValue name = 4;

  /**
   * How long to wait for the next HTTP/2 data frame to arrive in underlying stream. Whether this is a fatal error or
   * not is controlled by abort_poll_time_expired(). ISO-8601 duration string (e.g., "PT10S").
   */
  google.protobuf.StringValue poll_wait_time = 5;
}

/**
 * Overall connection configuration for block nodes.<br/>
 *
 * The BlockNodeConnectionInfo message SHOULD encapsulate all the information needed
 * for a consensus node to connect to a set of block nodes and stream blocks.
 */
message BlockNodeConnectionInfo {
    /**
     * A list of block node configurations.<br/>
     * This field SHALL list all block node configurations
     * to which the consensus node could connect.
     * The consensus node MUST connect to at least one block node to stream blocks.
     */
    repeated BlockNodeConfig nodes = 1;
}

