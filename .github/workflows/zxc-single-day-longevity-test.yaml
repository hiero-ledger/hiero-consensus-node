# SPDX-License-Identifier: Apache-2.0
name: "ZXC: [CITR] Single Day Longevity Test"

on:
  workflow_call:
    inputs:
      test-asset:
        required: true
        default: "SDLT2"
        description: "Longevity test on given Longevity Machine (AdHoc5,6,7, AdHocSD8,9, or SDLT2)"
        type: string
      ref:
        required: true
        default: "main"
        description: "Version of hiero-consensus-node: branch, tag, commit"
        type: string
      bnref:
        required: true
        default: "main"
        description: "Version of hiero-consensus-node: branch, tag, commit"
        type: string
      solo-version:
        required: true
        default: "v0.43.0"
        description: "Solo Version:"
        type: string
      nlg-accounts: #'-R -c 32 -a 100000000 -T 1000 -n 100000 -S hot -p 50 -tt 1m
        required: true
        default: "100000000"
        description: "Number of Accounts and NFT tokens (100000, 1000000, 20000000, 100000000, 500000000, 1000000000)"
        type: string
      nlg-time: #'-R -c 32 -a 100000000 -T 1000 -n 100000 -S hot -p 50 -tt 1m
        required: true
        default: "960"
        description: "Test execution time, mins (3, 9, 21, 180, 330)"
        type: string
      add-app-props:
        required: false
        default: ""
        type: string
        description: 'Add props to application.properties, e.g. "blockStream.streamMode=RECORDS". Newline is "\n"'
      add-settings:
        required: false
        default: ""
        type: string
        description: 'Add props to settings.txt, e.g. "state.saveStatePeriod, 300". Newline is "\n"'
      perf_analysis:
        required: false
        default: false
        type: boolean
        description: "Algorithmic analysis"
      NLGDparams:
        required: false
        default: '-Dbenchmark.maxtps=8000'
        description: 'Java props for Network Load Generator, e.g. -Dbenchmark.maxtps=8000'
        type: string
    secrets:
      slack-report-webhook:
        required: true
        description: "Slack webhook for SDLT outputs notifications"
      perf_ghp:
        required: true
        description: "Algorithmic analysis GHP"
      rootly-api-token:
        required: true
        description: "Rootly API Token for creating alerts/incidents"
    outputs:
      result:
        description: "Result of the SDLT Run"
        value: ${{ jobs.single-day-longevity-test-result.outputs.result }}

permissions:
  contents: write
  id-token: write

env:
  NAMESPACE_PREFIX: solo-sdlt-n
  TIMEOUT_6H_LIMIT: 340
  GS_ROOT_DIR: gs://performance-engineering-reports/ephemeral/test_runs
  GS_ROOT_HTTPS: https://perf.analytics.eng.hashgraph.io/ephemeral/test_runs
  #Release version from jFrog
  NLG_VERSION: 0.7.0
  BlockNode_version: 0.19.1
  NUM_OF_BLOCK_NODES: 7

jobs:
  longevity-tests-start:
    name: Start
    runs-on: hiero-citr-linux-large
    outputs:
      namespace: ${{ steps.set-namespace.outputs.namespace }}
      commit-sha: ${{ steps.hederahash.outputs.sha }}
      waiterMatrix: ${{ steps.matrix.outputs.value }}
      kubernetes-cluster: ${{ steps.set-k8s-cluster.outputs.kubernetes-cluster }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }}

      - name: Checkout target CN Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: target_consensus_node
          ref: ${{ inputs.ref }}

      - name: Checkout target BN Code
        run: |
          git clone https://github.com/hiero-ledger/hiero-block-node.git target_block_node
          cd target_block_node
          git checkout ${{ inputs.bnref }}
          cd "${{ github.workspace }}"

      - name: Checkout Perf Analysis
        run: |
          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            git clone https://"${{ secrets.perf_ghp }}"@github.com/swirldslabs/performance-analysis-automation.git performance-analysis-automation
            cd performance-analysis-automation
            git checkout fixes_Jul25
            cd "${{ github.workspace }}"
          fi

      - name: Checkout PBJ and Besu
        run: |
          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            git clone https://"${{ secrets.perf_ghp }}"@github.com/hashgraph/pbj.git pbj
            git clone --branch 24.3.3 --single-branch https://github.com/hyperledger/besu.git besu
          fi

      - name: Check Test Asset
        id: set-k8s-cluster
        run: |
          K8S_CLUSTER="k8s.pft.dal.lat.ope.eng.hashgraph.io"
          if [[ "${{ inputs.test-asset }}" =~ ^AdHoc(SD)?[0-9]+$ ]]; then
            K8S_CLUSTER="k8s.pft.chi.lat.ope.eng.hashgraph.io"
          fi
          echo "kubernetes-cluster=${K8S_CLUSTER}" >> "${GITHUB_OUTPUT}"

      - name: Install KubeCtl
        uses: step-security/setup-kubectl@2edbf6aff97d814e9dc52827498ac51fe972e6d0 # v4.0.0
        with:
          version: v1.33.0

      - name: Install Teleport Client
        uses: teleport-actions/setup@176c25dfcd19cd31a252f275d579822b243e7b9c # v1.0.6
        with:
          version: 18.1.4

      - name: Authorize Teleport SSH Access
        id: auth-ssh
        uses: teleport-actions/auth@685adaf480dc79262a99220eb158a92136d5abd9 # v2.0.3
        with:
          proxy: hashgraph.teleport.sh:443
          token: gh-citr-performance-svcs-bot

      - name: Authorize Teleport K8S Access
        id: auth-k8s
        uses: teleport-actions/auth-k8s@677da98eaa78a5e649d4c5b4012750af4c28af73 # v2.0.3
        with:
          proxy: hashgraph.teleport.sh:443
          token: gh-citr-performance-svcs-bot
          kubernetes-cluster: ${{ steps.set-k8s-cluster.outputs.kubernetes-cluster }}
          certificate-ttl: 20h

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/716789254648/locations/global/workloadIdentityPools/perf-eng-reports-pool/providers/gh-provider"
          service_account: "gh-perf-report-writer@perf-engineering-reports.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2

      - name: Setup Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: "v3.12.3" # helm version

      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: temurin
          java-version: 21.0.6

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@8379f6a1328ee0e06e2bb424dadb7b159856a326 # v4.4.0
        with:
          gradle-version: wrapper

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.39.2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/716789254648/locations/global/workloadIdentityPools/perf-eng-reports-pool/providers/gh-provider"
          service_account: "gh-perf-report-writer@perf-engineering-reports.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2

      - name: Install Cobertura
        run: |
          gcloud --no-user-output-enabled storage cp gs://performance-engineering-reports/permanent/cobertura-assembly-2.1.2-SNAPSHOT.tgz "${HOME}"/cobertura-assembly-2.1.2-SNAPSHOT.tgz
          cd "${HOME}"
          tar xfz cobertura-assembly-2.1.2-SNAPSHOT.tgz

      - name: OS check procedure
        id: setup
        shell: bash
        run: |
          set +x
          set +e
          export TERM=vt100
          echo Setup procedure ...
          cat /etc/*elease
          sudo apt-get -qq update
          sudo apt-get -qq install -y net-tools iputils-ping node-typescript

      - name: Create report dir
        shell: bash
        run: |
          mkdir "${{ github.workspace }}"/report

      - name: Set namespace
        id: set-namespace
        run: |
          set +x
          set +e
          #trim RUN_HCN_VERSION
          echo "RUN_HCN_VERSION=$(echo ${{ inputs.ref }} | awk '{print $1}')" >> "${GITHUB_ENV}"

          n="$(echo "${{ inputs.test-asset }}" | perl -ne 'print "$2\n" if /^(AdHocSD|AdHoc|SDPT|SDLT)(\d+)$/')"

          echo "namespace=${NAMESPACE_PREFIX}${n}" >> "${GITHUB_ENV}"
          echo "namespace=${NAMESPACE_PREFIX}${n}" >> "${GITHUB_OUTPUT}"
          echo "namespace=${NAMESPACE_PREFIX}${n}" >> "${GITHUB_STEP_SUMMARY}"
          echo "COBERTURA_HOME=${HOME}/cobertura-assembly-2.1.2-SNAPSHOT" >> "${GITHUB_ENV}"

      - name: Print parameters
        run: |
          echo "inputs.test-asset=${{ inputs.test-asset }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.ref=${{ inputs.ref }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.bnref=${{ inputs.bnref }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.solo-version=${{ inputs.solo-version }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.nlg-accounts=${{ inputs.nlg-accounts }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.nlg-time=${{ inputs.nlg-time }}m" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.add-app-props=${{ inputs.add-app-props }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.add-settings=${{ inputs.add-settings }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.perf_analysis=${{ inputs.perf_analysis }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "inputs.NLGDparams=${{ inputs.NLGDparams }}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt
          echo "JOB_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt

      - name: Set hederahash sha value
        id: hederahash
        run: |
          hederahash="$(git -C target_consensus_node rev-parse HEAD)"
          echo "sha=${hederahash}" >> "${GITHUB_OUTPUT}"
          echo "hederahash=${hederahash}" | tee -a "${GITHUB_STEP_SUMMARY}" "${{ github.workspace }}"/version_run.txt

      - name: Build PBJ
        run: |
          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            cd "${{ github.workspace }}"/pbj
            git checkout 620-stringByteArray
            cd pbj-core
            echo "0.12.1-SNAPSHOTALEX" >version.txt
           ./gradlew --no-daemon clean publishToMavenLocal
            cd ../..
          fi

      - name: Compile
        run: |
          set +e
          set +x
          cd "${{ github.workspace }}"/target_consensus_node
          ./gradlew clean assemble

          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            echo "Instrumenting CN ..."
            cd "${{ github.workspace }}"/target_consensus_node/hedera-node
            sh "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/instrumentCoverage.sh \
            `ls -1 data/lib/swirlds*.jar data/lib/app-*.jar data/lib/pbj*.jar data/lib/base-*.jar data/lib/hedera*.jar data/lib/hapi*.jar \
             data/lib/besu*.jar data/lib/evm*.jar data/lib/algorithms-*.jar data/lib/rlp-*.jar data/lib/*-0.8.2-module.jar \
             data/apps/HederaNode.jar data/lib/consensus*.jar data/lib/*event-creator*.jar data/lib/*-*.*.*-SNAPSHOT.jar | sort -u` > sources_init.txt 2>&1
            cp sources_init.txt "${{ github.workspace }}"/report/
            head sources_init.txt
            echo "..."
            tail sources_init.txt

            cd ..
          fi
          cd "${{ github.workspace }}"

      - name: Compile BN
        run: |
          cd "${{ github.workspace }}"/target_block_node
          ./gradlew block-node-app:distTar
          #produces ./block-node/app/build/distributions/block-node-app-0.18.0-SNAPSHOT.tar

          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            mkdir instrumentation
            cd instrumentation
            tarfile=$(ls -1 ../block-node/app/build/distributions/block-node-app-*.tar)
            tar xf $tarfile
            cd block-node-app-*
            pwd
            sh "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/instrumentCoverage.sh \
            `find . -type f \( -name 'block*.jar' -o -name 'swirlds*.jar' -o -name 'facility-messaging*.jar' -o -name 'pbj*.jar' \) -print` > BNsources_init.txt 2>&1
            mv BNsources_init.txt "${{ github.workspace }}"/report/
            ls -l *.ser
            mv *.ser ../../
            cd ..

            rm $tarfile 
            tar cvf $tarfile block-node-app-*

            #tar cfz "${{ github.workspace }}"/report/BNinitial_ser.tgz `find block-node-app-* -type f -name '*.ser`
            #sh "${{ github.workspace }}"/.github/lib/scp.sh "${{ github.workspace }}"/report/BNinitial_ser.tgz /tmp/"BNinitial_ser${{ github.run_number }}".tgz

            cd ..
          fi

          cd "${{ github.workspace }}"

      - name: Save instrumented workspaces
        run: |
          set +x
          set +e
          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            cd "${{ github.workspace }}"
            tar cfz workspaces.tgz target_consensus_node target_block_node pbj besu performance-analysis-automation
            gcloud --no-user-output-enabled storage cp --recursive workspaces.tgz "${{ env.GS_ROOT_DIR }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}"/workspaces.tgz
            echo Done: saved intrumented soures in "${{ env.GS_ROOT_HTTPS }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}"/workspaces.tgz
          fi

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20.18.0

      # Set up kind; needed for configuring the solo environment
      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          install_only: true
          node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
          version: v0.26.0
          kubectl_version: v1.31.4
          verbosity: 3
          wait: 120s

      - name: Install Solo
        run: |
          npm install -g "@hashgraph/solo@${{ inputs.solo-version || 'latest' }}"

          # verify the installation
          solo --version

      - name: Deploy with Solo
        env:
          NAMESPACE_ALIAS: ${{ inputs.test-asset }}
          CONTEXT: hashgraph.teleport.sh-${{ steps.set-k8s-cluster.outputs.kubernetes-cluster }}
        run: |
          set +x
          set +e
          curdir="$(pwd)"
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt get namespaces | grep "${{ steps.set-namespace.outputs.namespace }}"
          if [ ${?} -eq 0 ]
          then
            sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt delete namespace "${{ steps.set-namespace.outputs.namespace }}"
          fi

          # Create the solo directory
          mkdir -p "${{ github.workspace }}"/solo && cd "${{ github.workspace}}"/solo

          # Generate the Taskfile.yml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/Taskfile.yml Taskfile.yml

          # Generate the Taskfile.citr.yml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/Taskfile.citr.yml Taskfile.citr.yml

          # Generate the log4j2.xml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/log4j2.xml log4j2.xml

          # Generate the nlg-values.yaml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/nlg-values.yaml nlg-values.yaml

          # Generate the init-containers-values7.yaml inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/init-containers-values7.yaml init-containers-values7.yaml

          # Generate the block-node-values.yaml inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/block-node-values.yaml block-node-values.yaml

          # Update Taskfile values
          sed -i -e "s@%HOME%@${HOME}@g" -e "s@%SOLO_NAMESPACE%@${{ steps.set-namespace.outputs.namespace }}@g" \
          -e "s@%HEDERA_SERVICES_ROOT%@${curdir}/target_consensus_node@g" Taskfile.yml

          # Update Init Containers values
          NETWORK_ID="$(echo "${{ steps.set-namespace.outputs.namespace }}" | perl -pne '~s/^.*[^\d](\d+)$/$1/g')"
          sed -i -e "s@%NETWORK_ID%@${NETWORK_ID}@g" init-containers-values7.yaml
          sed -i -e "s@%NETWORK_ID%@${NETWORK_ID}@g" block-node-values.yaml

          if [[ "${NAMESPACE_ALIAS}" =~ ^SDLT[0-9]+$ ]]; then
            NETWORK_OWNER="single-day-longevity-test"
          elif [[ "${NAMESPACE_ALIAS}" =~ ^AdHocSD[0-9]+$ ]]; then
            NETWORK_OWNER="adhoc-single-day-test"
          else
            NETWORK_OWNER="adhoc-performance-test"
          fi
          sed -i -e "s@%NETWORK_OWNER%@${NETWORK_OWNER}@g" init-containers-values7.yaml
          sed -i -e "s@%NETWORK_OWNER%@${NETWORK_OWNER}@g" block-node-values.yaml

          # Generate the application.properties file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/application.properties.txt application.properties

          # Generate the settings.txt file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/settings.txt settings.txt

          if [ "${{ inputs.add-app-props }}" != "" ]
          then
            echo -e "${{ inputs.add-app-props }}" >> application.properties
            echo "New application.properties:"
            cat application.properties
          fi

          if [ "${{ inputs.add-settings }}" != "" ]
          then
            echo -e "${{ inputs.add-settings }}" >> settings.txt
            echo "New settings.txt:"
            cat settings.txt
          fi
          export NODE_COPY_CONCURRENT=1

          task
          task_code=${?}
          task solo:node:logs
          if [ ${task_code} -ne 0 ]
          then
             echo "ERROR! log:"
             tail -n 100 "${HOME}"/.solo/logs/solo.log
          fi

          sleep 30
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods
          cd "${{ github.workspace }}"

          mkdir solo_deploy
          cp -r "${HOME}"/.solo/logs solo_deploy/
          sh "${{ github.workspace }}"/.github/workflows/support/citr/getClusterErrors.sh "${{ steps.set-namespace.outputs.namespace }}"
          cp -r podlog_"${{ steps.set-namespace.outputs.namespace }}" solo_deploy/
          gcloud --no-user-output-enabled storage cp --recursive solo_deploy "${{ env.GS_ROOT_DIR }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}"/solo_deploy
          echo Done: solo deploy logs  in "${{ env.GS_ROOT_HTTPS }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}"/solo_deploy

          exit "${task_code}"

      - name: Add BlockNodes
        run: |
          set +x
          set +e
          cd "${{ github.workspace}}"/solo
          export BLOCK_NODE_VERSION="${{ env.BlockNode_version }}"

          #FIXME: when root access and entrypoint fixed
          if [ 0 -eq 1 ]
          then
          for i in `seq 1 1 ${{ env.NUM_OF_BLOCK_NODES }}`
          do
           task solo:block:add
          done
          sleep 30
          fi
          
          #WORKAROUND:

          # Generate the blocknode-values.yaml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/nlg-values.yaml blocknode-values.yaml

          #Disable auto-start
          sed -i -e 's/NftTransferLoadTest/NftTransferLoadTestDONOTSTART/g' blocknode-values.yaml
          NETWORK_ID="$(echo "${{ steps.set-namespace.outputs.namespace }}" | perl -pne '~s/^.*[^\d](\d+)$/$1/g')"
          sed -i -e "s@%NETWORK_ID%@${NETWORK_ID}@g" blocknode-values.yaml
          if [[ "${NAMESPACE_ALIAS}" =~ ^SDLT[0-9]+$ ]]; then
            NETWORK_OWNER="single-day-longevity-test"
          elif [[ "${NAMESPACE_ALIAS}" =~ ^MDLT[0-9]+$ ]]; then
            NETWORK_OWNER="multi-day-longevity-test"
          else
            NETWORK_OWNER="adhoc-performance-test"
          fi
          sed -i -e "s@%NETWORK_OWNER%@${NETWORK_OWNER}@g" blocknode-values.yaml
          sed -i -e 's/cpu: 20/cpu: 8/g' -e 's/auxiliary-services/consensus-node/g' blocknode-values.yaml
          for i in `seq 1 1 ${{ env.NUM_OF_BLOCK_NODES }}`
          do
           helm upgrade --install --set name=bn-${i} --set appName=bn-${i} block-node-${i} oci://swirldslabs.jfrog.io/load-generator-helm-release-local/network-load-generator \
             --version 0.6.2 --values blocknode-values.yaml -n "${{ steps.set-namespace.outputs.namespace }}" &
          done
          sleep 180
          wait
          
          BNtarname=$(ls -1 "${{ github.workspace }}"/target_block_node/block-node/app/build/distributions/block-node-app-*.tar)

          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep 'block-node-' | awk '{print $1}'`
          do
            sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -- bash -c "apt-get -qq update; apt-get install -qq -y unzip"
          done

          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep 'block-node-' | awk '{print $1}'`
          do
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp ${BNtarname} $i:/tmp/blocknode.tar
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -- bash -c "\
                mkdir -p /opt/hiero/block-node/data/historic;  \
                mkdir -p /opt/hiero/block-node/data/live;      \
                mkdir -p /opt/hiero/block-node/logs;           \
                mkdir -p /opt/hiero/block-node/logs/config;    \
                export SERVER_PORT=40840;                      \
                cd /opt/hiero/block-node; \
                tar xf /tmp/blocknode.tar;"

              if [ "${{ inputs.perf_analysis }}" = "true" ]
              then
                sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp "${{ github.workspace }}"/performance-analysis-automation/node_control/startInstrumentedBN.sh $i:/tmp/startInstrumentedBN.sh
                #sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -- bash -c \
                #  "cd /opt/hiero/block-node/; export SERVER_MAX_MESSAGE_SIZE_BYTES=\"16_777_215\"; MESSAGING_BLOCK_ITEM_QUEUE_SIZE=4096; MESSAGING_BLOCK_NOTIFICATION_QUEUE_SIZE=1024; sh /tmp/startInstrumentedBN.sh"
              else
                sleep 1
                #sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -- bash -c \
                #  "cd /opt/hiero/block-node/; export JAVA_OPTS=\"-Xms16G -Xmx28G\"; export SERVER_MAX_MESSAGE_SIZE_BYTES=\"16_777_215\"; MESSAGING_BLOCK_ITEM_QUEUE_SIZE=4096; MESSAGING_BLOCK_NOTIFICATION_QUEUE_SIZE=1024; bash ./block-node-app-*/bin/block-node-app > ./logs/block-node.log 2>&1 &"
              fi
          done
          sleep 30

      - name: Restart CNs with BlockNodes defined
        run: |
          set +x
          set +e
          cd "${{ github.workspace}}"/solo
          #sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get svc | grep 'block-node' | awk '{print $3}' > block_ips.txt

          echo >block_ips.txt
          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep 'block-node' | awk '{print $1}'`
          do
            sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" describe pod $i | grep -E '^IP:' | awk '{print $2}' >> block_ips.txt
          done

          #N-to-N mode
          counter=0
          for ip in `cat block_ips.txt`
          do
            echo "{\"nodes\": [" > block-nodes_$counter.json
            echo "{ \"address\": \"$ip\", \"port\": 40840, \"priority\": 1 }" >> block-nodes_$counter.json
            echo "]}" >> block-nodes_$counter.json
            counter=`expr $counter + 1`
          done
          
          if [ 0 -eq 1 ]
          then
          echo "{\"nodes\": [" > block-nodes.json
          #no prio2    { \"address\": \"$_\", \"port\": 40841, \"priority\": 2 },
          cat block_ips.txt | perl -ne '~s/\n//g; if ($. < ${{ env.NUM_OF_BLOCK_NODES }}) {$comma=","} else {$comma="";} \
            print "{ \"address\": \"$_\", \"port\": 40840, \"priority\": 1 }$comma"."\n";' >> block-nodes.json
          echo "]}" >> block-nodes.json

          echo "block-nodes.json is:"
          cat block-nodes.json
          jq . block-nodes.json
          fi
          
          cat << EOF >> application.properties
          blockStream.blockNodeConnectionFileDir=data/config
          grpc.nodeOperatorPortEnabled=true
          blockStream.writerMode=FILE_AND_GRPC
          blockStream.blockItemBatchSize=1024
          EOF

          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep network-node | awk '{print $1}'`
          do
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -c root-container -- su - hedera -c bash -c "ps -aef | grep -w java | grep -v grep | awk '{print \$2}' | xargs kill -15"
          done

          sleep 20
          echo "Must not have any javas running:"
          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep network-node | awk '{print $1}'`
          do
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -c root-container -- su - hedera -c bash -c "ps -aef | grep -w java | grep -v grep"
          done

          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            podFlag="cobertura"
          else
            podFlag="clean"
          fi

          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep network-node | awk '{print $1}'`
          do
              node_id=`echo ${i} | sed -e 's/network-node\([0-9][0-9]*\)-0/\1/g'`
              node_id=`expr $node_id - 1`
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp application.properties $i:/opt/hgcapp/services-hedera/HapiApp2.0/data/config/application.properties
          ##    sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp block-nodes_${node_id}.json $i:/opt/hgcapp/services-hedera/HapiApp2.0/data/config/block-nodes.json
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp "${{ github.workspace }}"/.github/workflows/support/citr/startPodJava.sh $i:/opt/hgcapp/services-hedera/HapiApp2.0/startPodJava.sh
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -c root-container -- bash -c "yum install -q -y unzip perl"

              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -c root-container -- su - hedera -c bash -c "cd /opt/hgcapp/services-hedera/HapiApp2.0; sh startPodJava.sh ${node_id} ${podFlag}"
          done

      - name: Move to Github Workspace
        run: cd "${{ github.workspace }}"

      - name: Prepare NLG parameters
        env:
          NAMESPACE_ALIAS: ${{ inputs.test-asset }}
        run: |
          set +x
          set +e
          cd ${{ github.workspace }}/solo

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt get svc -n "${{ steps.set-namespace.outputs.namespace }}" -l "solo.hedera.com/type=network-node-svc" |\
            grep -v 'node10' | grep -v 'CLUSTER-IP' > networks.txt
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt get svc -n "${{ steps.set-namespace.outputs.namespace }}" -l "solo.hedera.com/type=network-node-svc" |\
            grep 'node10' | grep -v 'CLUSTER-IP' >> networks.txt

          # Generate the nlg-values.yaml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/nlg-values.yaml nlg-values.yaml

          # Generate the merkledb-values.yaml file inline
          cp "${{ github.workspace }}"/.github/workflows/support/citr/merkledb-values.yaml merkledb-values.yaml

          #Disable auto-start
          sed -i -e 's/NftTransferLoadTest/NftTransferLoadTestDONOTSTART/g' nlg-values.yaml
          grep -v 'x.y.z' nlg-values.yaml > new.yml

          cat networks.txt | awk '{print $3}' | perl -ne "~s/\n//g; print \"     - '\$_\\\:50211=0.0.\".(3+\$.-1).\"'\n\"" >> new.yml
          mv new.yml nlg-values.yaml

          NETWORK_ID="$(echo "${{ steps.set-namespace.outputs.namespace }}" | perl -pne '~s/^.*[^\d](\d+)$/$1/g')"
          sed -i -e "s@%NETWORK_ID%@${NETWORK_ID}@g" nlg-values.yaml
          if [[ "${NAMESPACE_ALIAS}" =~ ^SDLT[0-9]+$ ]]; then
            NETWORK_OWNER="single-day-longevity-test"
          elif [[ "${NAMESPACE_ALIAS}" =~ ^AdHocSD[0-9]+$ ]]; then
            NETWORK_OWNER="adhoc-single-day-test"
          else
            NETWORK_OWNER="adhoc-performance-test"
          fi
          sed -i -e "s@%NETWORK_OWNER%@${NETWORK_OWNER}@g" nlg-values.yaml

      - name: Deploy NLG test
        run: |
          set +x
          set +e
          cd "${{ github.workspace }}"/solo
          helm upgrade --install --set appName=nlg nlg oci://swirldslabs.jfrog.io/load-generator-helm-release-local/network-load-generator --version "${{ env.NLG_VERSION }}" --values nlg-values.yaml -n "${{ steps.set-namespace.outputs.namespace }}"
          sleep 180
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods
          nlgpod="$(sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep nlg-network-load-generator| awk '{print $1}')"

          # Copy run version
          echo "run_number=${{ github.run_number }}" | tee -a "${{ github.workspace }}"/version_run.txt
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp "${{ github.workspace }}"/version_run.txt ${nlgpod}:/app/

      - name: Distribution of pods and nodes
        run: |
          set +x
          set +e

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ env.namespace }}" get pods -o=custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.spec.nodeName

      - name: Start Account Creation
        run: |
          run_NLGDebugparams="-Dorg.slf4j.simpleLogger.defaultLogLevel=debug " # e.g. -Dorg.slf4j.simpleLogger.defaultLogLevel=debug
          nlgpod=`sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep nlg-network-load-generator| awk '{print $1}'`
          n=`expr ${{ inputs.nlg-accounts }} / 1000`
          NLG_c=32

          if [ "${{ inputs.perf_analysis }}" = "true" ]
          then
            NLG_c=4
            run_NLGDebugparams="${run_NLGDebugparams} -Dbenchmark.maxtps=250"
          fi

          test=LongevityLoadTest

          NLGargs="-K ECDSA -R -c ${NLG_c} -a ${{ inputs.nlg-accounts }}  -n ${n} -T 1000 -S hot -p 50"

          echo kubectl -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "nohup /usr/bin/env java -Xmx30g \
            ${run_NLGDebugparams} -cp /app/lib/*:\$(ls -1 /app/network-load-generator-*.jar) com.hedera.benchmark.${test} \
            ${NLGargs} -tt 10s > client.log 2>&1 &"

          kubectl -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "nohup /usr/bin/env java -Xmx30g \
            ${run_NLGDebugparams} -cp /app/lib/*:\$(ls -1 /app/network-load-generator-*.jar) com.hedera.benchmark.${test} \
            ${NLGargs} -tt 10s > client.log 2>&1 &"
          sleep 30

      - name: Start BlockNode Cleaner
        if: false
        run: |
          set +x
          set +e
          nohup sh "${{ github.workspace }}"/.github/workflows/support/citr/blockNodeClean.sh "${{ steps.set-namespace.outputs.namespace }}" > ${{ github.workspace }}/report/blockNodeClean.log 2>&1 &

      - name: Wait for account creation
        run: |
          set +x
          set +e

          check_status() {
           logfile=$1
           ec=2 # continue
           grep -E 'Finished .*Test' ${logfile} >/dev/null
           if [ ${?} -eq 0 ]
           then
              echo "Test finished, exiting..."
              ec=0
           fi

           grep -E 'ERROR com.hedera.benchmark.*LoadTest - Setup|ERROR com.hedera.benchmark.*LoadTest - Test failed' ${logfile}
           if [ ${?} -eq 0 ]
           then
              echo "ERROR: Wrong config/environment"
              tail ${logfile}
              ec=1
           fi

           return ${ec}
          }

          sleep 60

          nlgpod="$(sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep nlg-network-load-generator| awk '{print $1}')"

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "tail /app/client.log"

          counter=0
          start_time="$(date +%s)"
          max_counter=${{ env.TIMEOUT_6H_LIMIT }}  #max_counter=330 mins

          ec=2
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "ps -aef | grep -w java | grep 'com.hedera.benchmark' | grep -v grep" | grep -w java > /dev/null
          isRunning=${?}

          while [ \( ${isRunning} -eq 0 \) -a \( ${counter} -le ${max_counter} \) ]
          do

           sleep 60
           current_time="$(date +%s)"
           counter="$(expr "${current_time}" - "${start_time}")"
           counter="$(expr "${counter}" \/ 60)"

           sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "tail /app/client.log" > client.log
           tail -n 1 client.log

           sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "ps -aef | grep -w java | grep 'com.hedera.benchmark' | grep -v grep" | grep -w java > /dev/null
           isRunning=${?}

           sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "grep -E 'ERROR com.hedera.benchmark|Finished .*Test' /app/client.log" > client_state.log
           check_status client_state.log
           ec=${?}
           if [ ${ec} -lt 2 ] #any terminal states 0 or 1, ec=2 is to continue
           then
             break
           fi
          done

          if [ -f "${{ github.workspace }}"/report/client.log ]
          then
            rm -rf "${{ github.workspace }}"/report/*
          fi

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp ${nlgpod}:/app/client.log "${{ github.workspace }}"/report/client.log
          sh "${{ github.workspace }}"/.github/workflows/support/citr/getClusterErrors.sh "${{ steps.set-namespace.outputs.namespace }}"
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp ${nlgpod}:/app/version_run.txt "${{ github.workspace }}"/report/version_run.txt
          cp -r podlog_"${{ steps.set-namespace.outputs.namespace }}" "${{ github.workspace }}"/report/

          check_status "${{ github.workspace }}"/report/client.log
          ec=${?}

          if [ ${ec} -eq 2 ]
          then
            echo "Continue to wait in next Runner ..."
            ec=0
          fi

          tail "${{ github.workspace }}"/report/client.log
          echo "Finished, exit code=${ec}"
          exit ${ec}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/716789254648/locations/global/workloadIdentityPools/perf-eng-reports-pool/providers/gh-provider"
          service_account: "gh-perf-report-writer@perf-engineering-reports.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2

      - name: Archive account creation logs
        run: |
          cd "${{ github.workspace }}"/

          gcloud --no-user-output-enabled storage ls gs://performance-engineering-reports 2>/dev/null | grep permanent >/dev/null 2>&1
          if [ ${?} -ne 0 ]
          then
            sleep 10
            gcloud --no-user-output-enabled storage ls gs://performance-engineering-reports | grep permanent >/dev/null
          fi

          echo "Size of report dir:"
          du -sk report

          gcloud --no-user-output-enabled storage cp --recursive report "${{ env.GS_ROOT_DIR }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}/create_accounts
          echo Done: see results in "${{ env.GS_ROOT_HTTPS }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}/create_accounts"

          echo "Truncating logs for next test..."
          sh "${{ github.workspace }}"/.github/workflows/support/citr/resetCNlogs.sh "${{ steps.set-namespace.outputs.namespace }}"

      - name: Restart BNs with approx block Ids
        run: |
          set +x
          set +e
          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep 'block-node-' | awk '{print $1}'`
          do
              cN=$(echo $i | perl -ne 'print "$1\n" if /^.*block-node-(\d+)-network-load-generator-.*$/')
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec network-node${cN}-0 -- bash -c \
                "grep -E 'BlockNodeConnectionManager.*Opening block with number' /opt/hgcapp/services-hedera/HapiApp2.0/output/hgcaa.log | tail -n 1" > /tmp/$$.tmpout.txt
              lastBlock=`cat /tmp/$$.tmpout.txt | perl -ne 'print "$1\n" if /^.*Opening block with number (\d+)\b.*$/'`
              rm -f /tmp/$$.tmpout.txt
              echo "Last block at node $cN is $lastBlock"
              lastBlock=`expr $lastBlock + 100` # 100 block ahead to let BN time to start
          
              if [ "${{ inputs.perf_analysis }}" = "true" ]
              then
                sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -- bash -c \
                  "cd /opt/hiero/block-node/; export SERVER_MAX_MESSAGE_SIZE_BYTES=\"16_777_215\"; MESSAGING_BLOCK_ITEM_QUEUE_SIZE=4096; MESSAGING_BLOCK_NOTIFICATION_QUEUE_SIZE=1024; export BLOCK_NODE_EARLIEST_MANAGED_BLOCK=$lastBlock;p sh /tmp/startInstrumentedBN.sh"
              else
                sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" exec $i -- bash -c \
                  "cd /opt/hiero/block-node/; export JAVA_OPTS=\"-Xms16G -Xmx28G\"; export SERVER_MAX_MESSAGE_SIZE_BYTES=\"16_777_215\"; MESSAGING_BLOCK_ITEM_QUEUE_SIZE=4096; MESSAGING_BLOCK_NOTIFICATION_QUEUE_SIZE=1024; export BLOCK_NODE_EARLIEST_MANAGED_BLOCK=$lastBlock; bash ./block-node-app-*/bin/block-node-app > ./logs/block-node.log 2>&1 &"
              fi
          done

      - name: Enable BNs after accounts were created
        run: |
          set +x
          set +e
          cd "${{ github.workspace}}"/solo
          
          for i in `sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep network-node | awk '{print $1}'`
          do
              node_id=`echo ${i} | sed -e 's/network-node\([0-9][0-9]*\)-0/\1/g'`
              node_id=`expr $node_id - 1`
              sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" cp block-nodes_${node_id}.json $i:/opt/hgcapp/services-hedera/HapiApp2.0/data/config/block-nodes.json
          done
          sleep 60

      - name: Start Longevity test
        run: |
          run_NLGDparams="${{ inputs.NLGDparams }}" # e.g. -Dbenchmark.maxtps=8000
          run_NLGDebugparams="-Dorg.slf4j.simpleLogger.defaultLogLevel=debug " # e.g. -Dorg.slf4j.simpleLogger.defaultLogLevel=debug
          nlgpod=`sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ steps.set-namespace.outputs.namespace }}" get pods | grep nlg-network-load-generator| awk '{print $1}'`
          n=`expr ${{ inputs.nlg-accounts }} / 1000`
          NLG_c=32

          if [ "${{ inputs.perf_analysis }}" = "true" ]
          then
            NLG_c=4
            run_NLGDebugparams="${run_NLGDebugparams}"
            run_NLGDparams="-Dbenchmark.maxtps=250"
          fi

          test=LongevityLoadTest

          NLGargs="-K ECDSA -R -c ${NLG_c} -a ${{ inputs.nlg-accounts }}  -n ${n} -T 1000 -S hot -p 50"

          echo kubectl -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "nohup /usr/bin/env java -Xmx30g ${run_NLGDparams} \
            ${run_NLGDebugparams} -cp /app/lib/*:\$(ls -1 /app/network-load-generator-*.jar) com.hedera.benchmark.${test} \
            ${NLGargs} -tt ${{ inputs.nlg-time }}m > client.log 2>&1 &"

          kubectl -n "${{ steps.set-namespace.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "nohup /usr/bin/env java -Xmx30g ${run_NLGDparams} \
            ${run_NLGDebugparams} -cp /app/lib/*:\$(ls -1 /app/network-load-generator-*.jar) com.hedera.benchmark.${test} \
            ${NLGargs} -tt ${{ inputs.nlg-time }}m > client.log 2>&1 &"
          sleep 30
      - id: matrix
        run: |
          runs=$(((${{ inputs.nlg-time }}+${{ env.TIMEOUT_6H_LIMIT }}-1)/${{ env.TIMEOUT_6H_LIMIT }}))
          runs=$(expr ${runs} + 1)
          matrix=$(seq 1 1 ${runs} | perl -ne '~s/\n//g; print "\"$_\","' | sed -e 's/^\(.*\)[,]$/\1/g')
          echo "value=[${matrix}]"
          echo "value=[${matrix}]" >> $GITHUB_OUTPUT

  longevity-tests-wait:
    name: Wait for Longevity test
    runs-on: hiero-citr-linux-large
    needs:
      - longevity-tests-start
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        value: ${{fromJSON(needs.longevity-tests-start.outputs.waiterMatrix)}}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Check Test Asset
        id: set-k8s-cluster
        run: |
          K8S_CLUSTER="k8s.pft.dal.lat.ope.eng.hashgraph.io"
          if [[ "${{ inputs.test-asset }}" =~ ^AdHoc(SD)?[0-9]+$ ]]; then
            K8S_CLUSTER="k8s.pft.chi.lat.ope.eng.hashgraph.io"
          fi
          echo "kubernetes-cluster=${K8S_CLUSTER}" >> "${GITHUB_OUTPUT}"

      - name: Install KubeCtl
        uses: step-security/setup-kubectl@2edbf6aff97d814e9dc52827498ac51fe972e6d0 # v4.0.0
        with:
          version: v1.33.0

      - name: Install Teleport Client
        uses: teleport-actions/setup@176c25dfcd19cd31a252f275d579822b243e7b9c # v1.0.6
        with:
          version: 18.1.4

      - name: Authorize Teleport SSH Access
        id: auth-ssh
        uses: teleport-actions/auth@685adaf480dc79262a99220eb158a92136d5abd9 # v2.0.3
        with:
          proxy: hashgraph.teleport.sh:443
          token: gh-citr-performance-svcs-bot

      - name: Authorize Teleport K8S Access
        id: auth-k8s
        uses: teleport-actions/auth-k8s@677da98eaa78a5e649d4c5b4012750af4c28af73 # v2.0.3
        with:
          proxy: hashgraph.teleport.sh:443
          token: gh-citr-performance-svcs-bot
          kubernetes-cluster: ${{ needs.longevity-tests-start.outputs.kubernetes-cluster }}
          certificate-ttl: 20h

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }}

      - name: Create report dir
        shell: bash
        run: |
          mkdir "${{ github.workspace }}"/report

      - name: Start BlockNode Cleaner
        run: |
          set +x
          set +e
          nohup sh "${{ github.workspace }}"/.github/workflows/support/citr/blockNodeClean.sh "${{ needs.longevity-tests-start.outputs.namespace }}" > ${{ github.workspace }}/report/blockNodeClean.log 2>&1 &

      - name: Wait for Longevity
        run: |
          echo "Matrix loop number ${{ matrix.value }}"
          set +x
          set +e

          check_status() {
           logfile=$1
           ec=2 # continue
           grep -E 'Finished .*Test' ${logfile} >/dev/null
           if [ ${?} -eq 0 ]
           then
              echo "Test finished, exiting..."
              ec=0
           fi

           grep -E 'ERROR com.hedera.benchmark.*LoadTest - Setup|ERROR com.hedera.benchmark.*LoadTest - Test failed' ${logfile}
           if [ ${?} -eq 0 ]
           then
              echo "ERROR: Wrong config/environment"
              tail "${logfile}"
              ec=1
           fi

           return ${ec}
          }

          sleep 60

          nlgpod="$(sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" get pods | grep nlg-network-load-generator| awk '{print $1}')"

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "tail /app/client.log"

          counter=0
          start_time=`date +%s`
          max_counter=${{ env.TIMEOUT_6H_LIMIT }}

          ec=2
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "ps -aef | grep -w java | grep 'com.hedera.benchmark' | grep -v grep" | grep -w java > /dev/null
          isRunning=${?}

          while [ \( ${isRunning} -eq 0 \) -a \( ${counter} -le ${max_counter} \) ]
          do

           sleep 60
           current_time=$(date +%s)
           counter=$(expr "${current_time}" - "${start_time}")
           counter=$(expr "${counter}" \/ 60)

           sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "tail /app/client.log" > client.log
           tail -n 1 client.log

           sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "ps -aef | grep -w java | grep 'com.hedera.benchmark' | grep -v grep" | grep -w java > /dev/null
           isRunning=${?}

           sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" exec ${nlgpod} -c nlg -- bash -c "grep -E 'ERROR com.hedera.benchmark|Finished .*Test' /app/client.log" > client_state.log
           check_status client_state.log
           ec=${?}
           if [ ${ec} -lt 2 ] #any terminal states 0 or 1, ec=2 is to continue
           then
             break
           fi
          done

          if [ -f "${{ github.workspace }}"/report/client.log ]
          then
            rm -rf "${{ github.workspace }}"/report/*
          fi

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" cp ${nlgpod}:/app/client.log "${{ github.workspace }}"/report/client.log

          check_status "${{ github.workspace }}"/report/client.log
          ec=${?}

          if [ ${ec} -eq 2 ]
          then
            echo "Continue to wait in next Runner ..."
            ec=0
          fi

          tail "${{ github.workspace }}"/report/client.log
          echo "Finished, exit code=${ec}"
          exit ${ec}

  longevity-tests-finish:
    name: Read results of Longevity test
    runs-on: hiero-citr-linux-large
    if: always()
    needs:
      - longevity-tests-start
      - longevity-tests-wait
    outputs:
      NFTscore: ${{ steps.NftTransferLoadTestLogs.outputs.value }}
      Heliscore: ${{ steps.HeliSwapLoadTestLogs.outputs.value }}
      Cryptoscore: ${{ steps.CryptoTransferLoadTestLogs.outputs.value }}
      HCSscore: ${{ steps.HCSLoadTestLogs.outputs.value }}
      Smartscore: ${{ steps.SmartContractLoadTestLogs.outputs.value }}

    steps:
      - name: Check Test Asset
        id: set-k8s-cluster
        run: |
          K8S_CLUSTER="k8s.pft.dal.lat.ope.eng.hashgraph.io"
          if [[ "${{ inputs.test-asset }}" =~ ^AdHoc(SD)?[0-9]+$ ]]; then
            K8S_CLUSTER="k8s.pft.chi.lat.ope.eng.hashgraph.io"
          fi
          echo "kubernetes-cluster=${K8S_CLUSTER}" >> "${GITHUB_OUTPUT}"

      - name: Install KubeCtl
        uses: step-security/setup-kubectl@2edbf6aff97d814e9dc52827498ac51fe972e6d0 # v4.0.0
        with:
          version: v1.33.0

      - name: Install Teleport Client
        uses: teleport-actions/setup@176c25dfcd19cd31a252f275d579822b243e7b9c # v1.0.6
        with:
          version: 18.1.4

      - name: Authorize Teleport SSH Access
        id: auth-ssh
        uses: teleport-actions/auth@685adaf480dc79262a99220eb158a92136d5abd9 # v2.0.3
        with:
          proxy: hashgraph.teleport.sh:443
          token: gh-citr-performance-svcs-bot

      - name: Authorize Teleport K8S Access
        id: auth-k8s
        uses: teleport-actions/auth-k8s@677da98eaa78a5e649d4c5b4012750af4c28af73 # v2.0.3
        with:
          proxy: hashgraph.teleport.sh:443
          token: gh-citr-performance-svcs-bot
          kubernetes-cluster: ${{ needs.longevity-tests-start.outputs.kubernetes-cluster }}
          certificate-ttl: 20h

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/716789254648/locations/global/workloadIdentityPools/perf-eng-reports-pool/providers/gh-provider"
          service_account: "gh-perf-report-writer@perf-engineering-reports.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2

      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: temurin
          java-version: 21.0.6

      - name: Install Cobertura
        run: |
          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
            gcloud --no-user-output-enabled storage cp gs://performance-engineering-reports/permanent/cobertura-assembly-2.1.2-SNAPSHOT.tgz "${HOME}"/cobertura-assembly-2.1.2-SNAPSHOT.tgz
            cd "${HOME}"
            tar xfz cobertura-assembly-2.1.2-SNAPSHOT.tgz
          fi

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }}

      - name: Create report dir
        shell: bash
        run: |
          mkdir "${{ github.workspace }}"/report

      - name: Copy logs
        run: |
          nlgpod="$(sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" get pods | grep nlg-network-load-generator| awk '{print $1}')"
          sleep 300 # known: to let all benchmark write down logs

          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" cp ${nlgpod}:/app/client.log "${{ github.workspace }}"/report/client.log
          sh "${{ github.workspace }}"/.github/workflows/support/citr/getClusterErrors.sh "${{ needs.longevity-tests-start.outputs.namespace }}"
          sh "${{ github.workspace }}"/.github/workflows/support/citr/kubectlt -n "${{ needs.longevity-tests-start.outputs.namespace }}" cp ${nlgpod}:/app/version_run.txt "${{ github.workspace }}"/report/version_run.txt
          cp -r podlog_"${{ needs.longevity-tests-start.outputs.namespace }}" "${{ github.workspace }}"/report/

      - name: Extract benchmark score of NftTransferLoadTest test
        id: NftTransferLoadTestLogs
        run: |
          grep -E 'Finished NftTransferLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' >> "${GITHUB_OUTPUT}"
          grep -E 'Finished NftTransferLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' | grep -E 'value=[0-9][0-9]*'

      - name: Extract benchmark score of HeliSwapLoadTest test
        id: HeliSwapLoadTestLogs
        run: |
          grep -E 'Finished HeliSwapLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' >> "${GITHUB_OUTPUT}"
          grep -E 'Finished HeliSwapLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' | grep -E 'value=[0-9][0-9]*'

      - name: Extract benchmark score of CryptoTransferLoadTest test
        id: CryptoTransferLoadTestLogs
        run: |
          grep -E 'Finished CryptoTransferLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' >> "${GITHUB_OUTPUT}"
          grep -E 'Finished CryptoTransferLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' | grep -E 'value=[0-9][0-9]*'

      - name: Extract benchmark score of HCSLoadTest test
        id: HCSLoadTestLogs
        run: |
          grep -E 'Finished HCSLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' >> "${GITHUB_OUTPUT}"
          grep -E 'Finished HCSLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' | grep -E 'value=[0-9][0-9]*'

      - name: Extract benchmark score of SmartContractLoadTest test
        id: SmartContractLoadTestLogs
        run: |
          grep -E 'Finished SmartContractLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' >> "${GITHUB_OUTPUT}"
          grep -E 'Finished SmartContractLoadTest' "${{ github.workspace }}"/report/client.log | sed -e 's/^.*Finished \([A-Za-z0-9][A-ZA-z0-9]*LoadTest\).*TPS[\:][ \t]*\([0-9][0-9]*\)$/value=\2/g' | grep -E 'value=[0-9][0-9]*'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/716789254648/locations/global/workloadIdentityPools/perf-eng-reports-pool/providers/gh-provider"
          service_account: "gh-perf-report-writer@perf-engineering-reports.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2

      - name: Process Algorithm Analysis
        run: |
          if [ "${{ inputs.perf_analysis }}" == "true" ]
          then
          set +e
          set +x
          export COBERTURA_HOME=${HOME}/cobertura-assembly-2.1.2-SNAPSHOT

          #restore all workspaces
          cd "${{ github.workspace }}"
          gcloud --no-user-output-enabled storage cp --recursive  "${{ env.GS_ROOT_DIR }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}"/workspaces.tgz ./workspaces.tgz
          tar xfz workspaces.tgz

          #CN
          cd "${{ github.workspace }}"/target_consensus_node/hedera-node
          sh "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/collectSERfiles.sh "${{ needs.longevity-tests-start.outputs.namespace }}"
          echo "Debug"
          pwd
          ls -l *.ser

          bash "${COBERTURA_HOME}"/cobertura-merge.sh --datafile ../final.ser *.ser > sources_merge.txt 2>&1
          bash "${COBERTURA_HOME}"/cobertura-report.sh --datafile ../final.ser --destination sources --format html \
          `find .. ../../pbj ../../besu -type d \( -path '*src/main/java' -o -path '*source*/java/main' -o -path '*source*/main/java' \) -exec printf "%s" {}" " \;` > sources_report.txt 2>&1
          
          bash "${COBERTURA_HOME}"/cobertura-report.sh --datafile ../final.ser --destination reportsXML --format xml \
          `find .. ../../pbj ../../besu -type d \( -path '*src/main/java' -o -path '*source*/java/main' -o -path '*source*/main/java' \) -exec printf "%s" {}" " \;` > sources_reportXML.txt 2>&1
          
          sh "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/anchorHTML.sh sources
          perl "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/fixLambdasCobertura.pl reportsXML/coverage.xml > reportsXML/coverage2.xml
          perl "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/perfByCobertura.pl reportsXML/coverage2.xml  > stats.txt
          perl "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/gen_prof_max_derivative.pl stats.txt > sources/perf_report.html
          cp "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/sorttable.js sources/
          mkdir -p "${{ github.workspace }}"/report/algorithms/CN
          cp -r sources sources_* "${{ github.workspace }}"/report/algorithms/CN
          cp reportsXML/coverage.xml reportsXML/coverage2.xml "${{ github.workspace }}"/report/algorithms/CN/
          cd "${{ github.workspace }}"
          
          #BN
          cd "${{ github.workspace }}"/target_block_node
          sh "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/collectSERfiles.sh "${{ needs.longevity-tests-start.outputs.namespace }}" block-node /opt/hiero/block-node
          echo "Debug"
          pwd
          ls -l *.ser

          bash "${COBERTURA_HOME}"/cobertura-merge.sh --datafile ../final.ser *.ser > sources_merge.txt 2>&1
          bash "${COBERTURA_HOME}"/cobertura-report.sh --datafile ../final.ser --destination sources --format html \
          `find . ../pbj ../target_consensus_node -type d \( -path '*src/main/java' -o -path '*source*/java/main' -o -path '*source*/main/java' \) -exec printf "%s" {}" " \;` > sources_report.txt 2>&1
          
          bash "${COBERTURA_HOME}"/cobertura-report.sh --datafile ../final.ser --destination reportsXML --format xml \
          `find . ../pbj ../target_consensus_node -type d \( -path '*src/main/java' -o -path '*source*/java/main' -o -path '*source*/main/java' \) -exec printf "%s" {}" " \;` > sources_reportXML.txt 2>&1
          
          sh "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/anchorHTML.sh sources
          perl "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/fixLambdasCobertura.pl reportsXML/coverage.xml > reportsXML/coverage2.xml
          perl "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/perfByCobertura.pl reportsXML/coverage2.xml  > stats.txt
          perl "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/gen_prof_max_derivative.pl stats.txt > sources/perf_report.html
          cp "${{ github.workspace }}"/performance-analysis-automation/performance_analysis_scripts/sorttable.js sources/
          mkdir -p "${{ github.workspace }}"/report/algorithms/BN
          cp -r sources sources_* "${{ github.workspace }}"/report/algorithms/BN
          cp reportsXML/coverage.xml reportsXML/coverage2.xml "${{ github.workspace }}"/report/algorithms/BN/

          cd "${{ github.workspace }}"
          fi

      - name: Publish logs
        if: ${{ !cancelled() }}
        run: |
          cd "${{ github.workspace }}"/

          gcloud --no-user-output-enabled storage ls gs://performance-engineering-reports 2>/dev/null | grep permanent >/dev/null 2>&1
          if [ ${?} -ne 0 ]
          then
            sleep 10
            gcloud --no-user-output-enabled storage ls gs://performance-engineering-reports | grep permanent >/dev/null
          fi

          echo "Size of report dir:"
          du -sk report

          gcloud --no-user-output-enabled storage cp --recursive report "${{ env.GS_ROOT_DIR }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}/report/longevity"
          echo Done: see results in "${{ env.GS_ROOT_HTTPS }}/${{ inputs.ref }}_${{ inputs.test-asset }}_${{ github.run_number }}/report/longevity"

          echo "Truncating logs for next test..."
          sh "${{ github.workspace }}"/.github/workflows/support/citr/resetCNlogs.sh "${{ needs.longevity-tests-start.outputs.namespace }}"

  # Send this output back to the caller workflow
  single-day-longevity-test-result:
    name: Calculate Result
    runs-on: hiero-citr-linux-large
    if: ${{ always() }}
    needs:
      - longevity-tests-finish
    outputs:
      result: ${{ steps.sdlt-status.outputs.result }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Set output
        id: sdlt-status
        run: |
          RESULT="failure"
          NFT="${{ needs.longevity-tests-finish.outputs.NFTscore }}"
          HELI="${{ needs.longevity-tests-finish.outputs.Heliscore }}"
          CRYPTO="${{ needs.longevity-tests-finish.outputs.Cryptoscore }}"
          HCS="${{ needs.longevity-tests-finish.outputs.HCSscore }}"
          SMART="${{ needs.longevity-tests-finish.outputs.Smartscore }}"

          # Check if any variable is empty. If it is, we set the result to failure.
          if [ -z "${NFT}" ] || [ -z "${HELI}" ] || [ -z "${CRYPTO}" ] || [ -z "${HCS}" ] || [ -z "${SMART}" ]; then
            RESULT="failure"
          else
            RESULT="success"
          fi

          echo "### Single Day Longevity Result" >> "${GITHUB_STEP_SUMMARY}"
          echo "result=${RESULT}" >> "${GITHUB_STEP_SUMMARY}"
          echo "result=${RESULT}" >> "${GITHUB_OUTPUT}"

  longevity-report-to-rootly:
    name: Report Failures to Rootly
    runs-on: hiero-citr-linux-medium
    needs:
      - longevity-tests-start
      - longevity-tests-finish
      - single-day-longevity-test-result
    #if: ${{ (needs.longevity-tests-start.result != 'success' ||
    #  needs.single-day-longevity-test-result.result != 'success') &&
    #  !cancelled() && always() }}
    if: false
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Check Test Asset
        id: check-test-asset
        run: |
          ADHOC="false"
          if [[ "${{ inputs.test-asset }}" =~ ^AdHoc(SD)?[0-9]+$ ]]; then
            ADHOC="true"
          fi
          echo "is-adhoc=${ADHOC}" >> "${GITHUB_OUTPUT}"

      - name: Set Rootly Service Name
        id: set-rootly-service
        run: |
          ROOTLY_SERVICE_NAME="CITR SDLT"
          echo "service=${ROOTLY_SERVICE_NAME}" >> "${GITHUB_OUTPUT}"

      - name: Build Rootly Summary
        id: rootly-summary
        run: |
          title="The Single Day Longevity Test workflow failed (SDLT ${{ inputs.test-asset }} - ${{ inputs.ref }})"
          echo "title=${title}" >> "${GITHUB_OUTPUT}"
          {
            echo 'summary<<EOF'
            echo "------------------------------------"
            echo "Status of each jobs:"
            echo "- Longevity Tests Start: ${{ needs.longevity-tests-finish.result }}"
            echo "- Single Day Longevity Test Result: ${{ needs.single-day-longevity-test-result.result }}"
            echo "------------------------------------"
            echo "Commit information:"
            echo "- Commit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ needs.longevity-tests-start.outputs.commit-sha }}>"
            echo "- Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
            echo EOF
          } >> "${GITHUB_OUTPUT}"

      - name: Log Rootly Summary
        run: |
          echo "## Rootly Summary" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Title: ${{ steps.rootly-summary.outputs.title }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "${{ steps.rootly-summary.outputs.summary }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Rootly Service" >> "${GITHUB_STEP_SUMMARY}"
          echo "${{ steps.set-rootly-service.outputs.service }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "### AdHoc Run?" >> "${GITHUB_STEP_SUMMARY}"
          echo "${{ steps.check-test-asset.outputs.is-adhoc }}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Create Rootly Alert
        id: rootly-alert
        if: ${{ steps.check-test-asset.outputs.is-adhoc == 'false' }}
        uses: pandaswhocode/rootly-alert-action@fdae1529e5aed62040016accf719a0ceb7dae57f # v1.0.0
        continue-on-error: true
        with:
          api_key: ${{ secrets.rootly-api-token }}
          summary: ${{ steps.rootly-summary.outputs.title }}
          details: ${{ steps.rootly-summary.outputs.summary }}
          notification_target_type: "Service"
          notification_target: ${{ steps.set-rootly-service.outputs.service }}
          set_as_noise: "true"
          alert_urgency: "High"
          external_id: ${{ github.run_id }}
          external_url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          environments: "CITR"

  longevity-report-to-Slack:
    runs-on: hiero-citr-linux-medium
    if: false
    needs:
      - longevity-tests-finish
      - single-day-longevity-test-result

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Clean branch or tag name from input.ref
        id: clean-branch-name
        run: |
          raw_ref="${{ inputs.ref }}"
          echo "Raw input ref: $raw_ref"
          clean_ref=""

          if [[ "{$raw_ref}" == refs/heads/* ]]; then
            clean_ref="${raw_ref#refs/heads/}"
          elif [[ "$raw_ref" == refs/tags/* ]]; then
            clean_ref="${raw_ref#refs/tags/}"
          elif [[ "$raw_ref" == refs/pull/*/merge ]]; then
            clean_ref="PR-${raw_ref#refs/pull/}"
            clean_ref="${clean_ref%/merge}"
          fi

          echo "clean_ref=$clean_ref" >> "${GITHUB_OUTPUT}"

      - name: Build Slack Payload Message
        id: payload
        run: |

          report="\
            NftTransferLoadTest ${{ needs.longevity-tests-finish.outputs.NFTscore }} \n\
            HCSLoadTest ${{ needs.longevity-tests-finish.outputs.HCSscore }} \n\
            CryptoTransferLoadTest ${{ needs.longevity-tests-finish.outputs.Cryptoscore }} \n\
            HeliSwapLoadTest ${{ needs.longevity-tests-finish.outputs.Heliscore }}\n\
            SmartContractLoadTest ${{ needs.longevity-tests-finish.outputs.Smartscore }}"
          #last line is 5, it does not need comma block separator
          freport=`/usr/bin/echo -e "$report" | awk '{print $1" "$2}'| perl -ne 'if ($. < 5) {$comma=","} else {$comma="";} ($t,$d)=split(/\s+/,$_,2);printf("{\"type\": \"text\",\"text\": \"%-25s %7d \\\n\"}%s",$t,$d,$comma);'`
          freport="{\"type\": \"text\",\"text\": \"Name                          TPS\n\"},$freport"

          cat <<EOF > slack_payload.json
          {
            "attachments": [
              {
                "color": "#777777",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "NLG Longevity Test Report (SDLT) - ${{ steps.clean-branch-name.outputs.clean_ref }}",
                      "emoji": true
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                      "type": "rich_text",
                      "elements": [
                        {
                          "type": "rich_text_preformatted",
                          "elements": [
                            ${freport}
                          ]
                        }
                      ]
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Workflow and Commit Information*"
                    },
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Workflow run ID*:"
                      },
                      {
                        "type": "mrkdwn",
                        "text": " ${{ github.run_id }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Version*: ${{ inputs.ref }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF

      ## Slack notifications
      - name: Report status (slack detailed reports)
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d # v2.0.0
        with:
          webhook: ${{ secrets.slack-report-webhook }}
          webhook-type: incoming-webhook
          payload-templated: true
          payload-file-path: slack_payload.json
