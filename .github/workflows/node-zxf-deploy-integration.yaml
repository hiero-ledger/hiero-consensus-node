# SPDX-License-Identifier: Apache-2.0
name: "ZXF: [Node] Deploy Integration Network Release"
on:
  workflow_dispatch:
    inputs:
      ref:
        required: true
        description: "The github branch or tag that triggered the workflow"
      ref_name:
        required: true
        description: "The name of the github branch or tag that triggered the workflow"

permissions:
  contents: read

jobs:
  jenkins-checks:
    name: Build Artifact
    runs-on: hiero-network-node-linux-medium
    if: ${{ !github.event.workflow_dispatch.repository.fork }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Check out code at the specified ref
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref }}

      - name: Gather commit info
        id: gather-commit-info
        run: |
          # Fetch info from the most recent commit for the given ref
          COMMIT_SHA=${{ inputs.ref }}
          COMMIT_AUTHOR="$(git show -s --format='%an' ${COMMIT_SHA})"
          COMMIT_MSG="$(git show -s --format='%s' ${COMMIT_SHA})"
          
          # Print them to the console
          echo "Commit Author: $COMMIT_AUTHOR"
          echo "Commit Message: $COMMIT_MSG"
          echo "Commit SHA: $COMMIT_SHA"
          
          # Expose them as outputs for the next steps
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Notify Jenkins of Release (Integration)
        id: jenkins-integration
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "${{ inputs.ref_name }}",
              "author": "${{ steps.gather-commit-info.outputs.author }}",
              "msg": "${{ steps.gather-commit-info.outputs.msg }}",
              "sha": "${{ inputs.ref }}"
            }' \
            ${{ secrets.RELEASE_JENKINS_INTEGRATION_URL }})
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Raw response from Jenkins:"
          echo "$RESPONSE"

      - name: Display Jenkins Payload
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response }}
        run: |
          jq '.' <<<"${JSON_RESPONSE}" || echo "Failed to parse response as JSON"
          printf "### Jenkins Response Payload\n\`\`\`json\n%s\n\`\`\`\n" "$(jq '.' <<<"${JSON_RESPONSE}" 2>/dev/null || echo "${JSON_RESPONSE}")" >>"${GITHUB_STEP_SUMMARY}"
          jq '.jobs | keys[]' <<<"${JSON_RESPONSE}" || echo "No jobs key found in response"

      - name: Check for Jenkins Failures (Integration)
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response }}
        run: |
          echo "Response content:"
          echo "${JSON_RESPONSE}"
          
          if [ -z "${JSON_RESPONSE}" ]; then
            echo "::error::Empty response from Jenkins"
            exit 1
          fi
          
          INTEGRATION_TRIGGERED="$(echo "${JSON_RESPONSE}" | jq -r '.jobs."build-upgrade-integration".triggered // "false"' 2>/dev/null || echo "false")"
          DOCKER_TRIGGERED="$(echo "${JSON_RESPONSE}" | jq -r '.jobs."build-upgrade-integration-docker".triggered // "false"' 2>/dev/null || echo "false")"
          
          echo "INTEGRATION_TRIGGERED=${INTEGRATION_TRIGGERED}"
          echo "DOCKER_TRIGGERED=${DOCKER_TRIGGERED}"
          
          if [[ "${INTEGRATION_TRIGGERED}" != "true" ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration' job via the Jenkins pipeline!"
            exit 1
          fi
          
          if [[ "${DOCKER_TRIGGERED}" != "true" ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration-docker' job via the Jenkins pipeline!"
            exit 1
          fi
          
          echo "Both Jenkins jobs were triggered successfully."
          exit
