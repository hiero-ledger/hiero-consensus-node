# SPDX-License-Identifier: Apache-2.0
name: "Generate Release Notes"
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release Version Number (ex: 0.59.2):"
        type: string
        required: true

defaults:
  run:
    shell: bash

permissions:
  contents: read
  actions: read

jobs:
  generate-release-notes:
    name: Generate Release Notes
    runs-on: hiero-network-node-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - name: Extract the Input Version
        id: extract-version
        run: |
          echo "version=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" >> "${GITHUB_OUTPUT}"
          echo "Version Number to Process:" >> "${GITHUB_STEP_SUMMARY}"
          echo "${version}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Validate and Correct Release Identifier
        id: validate
        run: |
          release_identifier="${{ steps.extract-version.outputs.version }}"

          echo "Input release identifier: '${release_identifier}'"

          is_valid=$(semver validate "${release_identifier}")

          if [[ "$is_valid" != "valid" ]]; then
            echo "Invalid semantic version: ${release_identifier}"
            exit 1
          fi
          
          cleaned="${release_identifier#v}"
          
          echo "Release identifier is valid: ${cleaned}"
          echo "release-identifier=${cleaned}" >> "${GITHUB_OUTPUT}"
          echo "Validated Input: ${cleaned}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: "0"
          ref: main
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Validate Tag Exists
        run: |
          tag="v${{ steps.validate.outputs.release-identifier }}"

          echo "Checking if tag ${tag} exists..."

          if git rev-parse "${tag}" >/dev/null 2>&1; then
            echo "Tag ${tag} found in repo." >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "Error: Tag ${tag} does not exist in repo." >> "${GITHUB_STEP_SUMMARY}"
            exit 1
          fi

      - name: Git-Semver Setup Action
        uses: PandasWhoCode/setup-git-semver@91baf2ca207495aa35db3441038ddeae2b6904c7 # v1.0.2

      - name: Create Release Notes - Feats and Fixes Only Markdown Format
        run: |
          echo "Release Notes - Feats and Fixes Only Markdown Format" | tee -a "${GITHUB_STEP_SUMMARY}"
          echo "" | tee -a "${GITHUB_STEP_SUMMARY}"
          echo "## Release Notes" | tee -a "${GITHUB_STEP_SUMMARY}"
          echo "" | tee -a "${GITHUB_STEP_SUMMARY}"
          
          git-semver log --markdown "${{ steps.validate.outputs.release-identifier }}" | tee -a "${GITHUB_STEP_SUMMARY}"

      - name: Get All Changes in JSON Format
        run: |
          echo "Create Release Notes of Conventional Commits"
          git-semver log --conventional-commits "${{ steps.validate.outputs.release-identifier }}" | tee changes.json

      - name: Process All Changes to Markdown File
        id: generate-md
        run: |
          python3 - <<'EOF'
          import json
          import re
          import os

          json_file = "changes.json"
          output_file = "RELEASE_NOTES.md"

          repo = os.environ.get("GITHUB_REPOSITORY")
          pr_url_prefix = f"https://github.com/{repo}/pull/"

          with open(json_file) as f:
              data = json.load(f)

          features = []
          bug_fixes = []
          others = []

          for item in data:
              typ = item.get("type")
              desc = item.get("description", "").strip()
              if not desc:
                  continue

              # Convert PR numbers (#12345) into links
              desc = re.sub(r"\(#(\d+)\)", r"[#\1](" + pr_url_prefix + r"\1)", desc)

              if typ == "feat":
                  features.append(desc)
              elif typ == "fix":
                  bug_fixes.append(desc)
              else:
                  others.append(desc)

          with open(output_file, "w") as out:
              if features:
                  out.write("### Features\n")
                  for f in features:
                      out.write(f"- {f}\n")
                  out.write("\n")

              if bug_fixes:
                  out.write("### Bug Fixes\n")
                  for f in bug_fixes:
                      out.write(f"- {f}\n")
                  out.write("\n")

              if others:
                  out.write("### Other Changes\n")
                  for f in others:
                      out.write(f"- {f}\n")
                  out.write("\n")
          EOF

      - name: Create Release Notes - Full Markdown Format
        run: |
          echo "Release Notes - Full Markdown Format" | tee -a "${GITHUB_STEP_SUMMARY}"
          echo "" | tee -a "${GITHUB_STEP_SUMMARY}"
          echo "## Release Notes" | tee -a "${GITHUB_STEP_SUMMARY}"
          echo "" | tee -a "${GITHUB_STEP_SUMMARY}"
          cat RELEASE_NOTES.md | tee -a "${GITHUB_STEP_SUMMARY}"

      - name: Create Full List of Git History Commits
        run: |
          echo "Create Full List of Git History Commits:"
          git-semver log "${{ steps.validate.outputs.release-identifier }}"
