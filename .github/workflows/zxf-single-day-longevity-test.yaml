# SPDX-License-Identifier: Apache-2.0
name: "ZXF: [CITR] Single Day Canonical Tests (SDCT)"

on:
  workflow_dispatch:
    inputs:
      ref:
        required: true
        default: "main"
        description: "Version of hiero-consensus-node: branch, tag, commit."
        type: string
      build-tag:
        required: true
        description: "build-XXXXX tag associated with the ref input."
        type: string

defaults:
  run:
    shell: bash

env:
  USERNAME: ${{ secrets.TESTING_JENKINS_API_USERNAME }}
  PASSWORD: ${{ secrets.TESTING_JENKINS_API_PASSWORD }}
  SERVER: ${{ secrets.TESTING_JENKINS_API_SERVER }}

jobs:
  canonical-test:
    name: Canonical
    runs-on: hiero-citr-linux-medium
    timeout-minutes: 60  # max one hour timeout 

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ github.token }}
          persist-credentials: false

      - name: Authenticate to Google Cloud
        uses: step-security/google-github-auth@40f6deebd366f16c782d7a0ad0844e3b96a032a6 # v2.1.10
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"
          token_format: 'access_token'
          create_credentials_file: true

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@77e7a554d41e2ee56fc945c52dfd3f33d12def9a # v2.1.4
        with:
          version: 'latest'
          install_components: 'gsutil'

     - name: Install Utility Tools
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "::group::Setup JQ Command"
            sudo apt update
            sudo apt install -y jq
            echo "::endgroup::"
          fi
          JQ_VERSION="$(jq --version)"
          if [[ "${JQ_VERSION}" != "jq-1.6" ]]; then
            echo "::group::Updating JQ Version"
            sudo apt update
            sudo apt upgrade -y jq
            echo "::endgroup::"
          fi
          if ! command -v tee >/dev/null 2>&1; then
            echo "::group::Setup Tee Command"
            sudo apt update
            sudo apt install -y coreutils
            echo "::endgroup::"
          fi
          if ! command -v curl >/dev/null 2>&1; then
            echo "::group::Setup Curl Command"
            sudo apt update
            sudo apt install -y curl
            echo "::endgroup::"
          fi
          echo "::group::Show JQ Version"
          jq --version
          echo "::endgroup::"

      - name: Verify Workflow Parameters
        id: parameters
        run: |
          set -euo pipefail

          BRANCH_NAME="${{ inputs.ref }}"
          BUILD_ARTIFACT="${{ inputs.build-tag }}"
          if [[ "${BRANCH_NAME}" = "main" ]]; then
            BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
            BRANCH_NAME_SAFE="$(echo "${BRANCH_NAME_LOWER}" | tr '/_' '-.')"
            TAG_COMMIT_SHA=$(git rev-list -n 1 "${BUILD_ARTIFACT}") || {
              echo "❌ Error : Tag ${BUILD_ARTIFACT} not found"
              exit 1
            }
            TAG_COMMIT_SHORT="${TAG_COMMIT_SHA:0:8}"
            BUILD_ARTIFACT="build-${BRANCH_NAME_SAFE}-${TAG_COMMIT_SHORT}"
          fi
          echo "artifact-name=${BUILD_ARTIFACT}" >> "${GITHUB_OUTPUT}"
          echo "Artifact name: ${BUILD_ARTIFACT}"

      - name: Check If Release Artifact Exist in Bucket
        id: check-if-exist
        run: |
          set -euo pipefail

          ARTIFACT_NAME="${{ steps.parameters.outputs.artifact-name }}"
          BUCKET_NAME="${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}"
          if [[ -z "${ARTIFACT_NAME}" ]]; then
            echo "❌ Error : Artifact name is empty"
            exit 1
          fi
          if [[ -z "${BUCKET_NAME}" ]]; then
            echo "❌ Error : Bucket name is empty"
            exit 1
          fi

          ARTIFACT_PATH="gs://${BUCKET_NAME}/${ARTIFACT_NAME}.zip"
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}"

          while true
          do
            gsutil -q stat "${ARTIFACT_PATH}"
            PATH_EXIST=$?
            if [ ${PATH_EXIST} -eq 0 ]; then
              break
            else
              echo "⏳ Artifact ${ARTIFACT_NAME}.zip not ready, wait for 2 minutes."
              sleep 2m
            fi
          done
          echo "✅ Artifact ${ARTIFACT_NAME}.zip is available."
          echo "build-tag=${{ inputs.build-tag }}" >> "${GITHUB_OUTPUT}"
          echo "build-version=${ARTIFACT_NAME}" >> "${GITHUB_OUTPUT}"

      - name: Start Canonical Test
        id: start-canonical-test
        run: |
          bash "${{ github.workspace }}/${{ env.TEST_SCRIPT }}" "${{ env.USERNAME }}" "${{ env.PASSWORD }}" "${{ env.SERVER }}" "${{ env.K8S_CLUSTER }}" "${{ steps.check-if-exist.outputs.build-tag }}" "${{ steps.check-if-exist.outputs.build-version }}" 

      - name: Summary
        run: |
          set -euo pipefail

          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Reference**: ${{ inputs.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tag**: ${{ inputs.build-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: ${{ steps.check-if-exist.outputs.build-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Verified**: ${{ steps.verify-artifact.outputs.artifact-verified }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: :white_check_mark: Ready for canonical testing" >> $GITHUB_STEP_SUMMARY


