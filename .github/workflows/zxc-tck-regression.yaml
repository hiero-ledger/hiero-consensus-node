# SPDX-License-Identifier: Apache-2.0
name: "ZXC: TCK Regression"
on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch, tag or SHA to checkout:"
        required: false
        type: string
      custom-job-name:
        description: "The custom job name to use for the job."
        required: false
        type: string
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag or SHA to checkout:"
        required: false
        type: string
      custom-job-name:
        description: "The custom job name to use for the job."
        required: false
        type: string
    secrets:
      access-token:
        description: "The Github access token used to checkout the repository, submodules, and make GitHub API calls."
        required: true

defaults:
  run:
    shell: bash
    working-directory: platform-sdk

permissions:
  id-token: write
  checks: write
  contents: read

env:
  SOLO_CLUSTER_NAME: "solo-tck-e2e"
  SOLO_NAMESPACE: "solo-tck-e2e"
  SOLO_DEPLOYMENT: "solo-tck-deployment"
  SOLO_CLUSTER_SETUP_NAMESPACE: "solo-setup"
  GRADLE_EXEC: ionice -c 2 -n 2 nice -n 19 ./gradlew

jobs:
  # Execute TCK Regression Tests using specified version of hiero-consensus-node
  tck-regression:
    name: ${{ inputs.custom-job-name || 'Standard' }}
    runs-on: hiero-network-node-linux-large
    if: ${{ !github.event.workflow_call.repository.fork }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      #  Check out the specified hiero-consensus-node reference
      - name: Checkout Platform Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref || '' }}
          fetch-depth: 0

      #  Checkout the sdk-tck repository
      - name: Checkout Regression Code (workflow_call)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: ${{ github.event_name == 'workflow_call' }}
        with:
          path: platform-sdk/regression
          repository: hiero-ledger/hiero-sdk-tck
          token: ${{ secrets.access-token }}
          fetch-depth: "1"

      - name: Checkout Regression Code (workflow_dispatch)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          path: platform-sdk/regression
          repository: hiero-ledger/hiero-sdk-tck
          token: ${{ secrets.SDK_TCK_GH_ACCESS_TOKEN }} # secret needs to be added
          fetch-depth: "1"

      # Set up Java Environment
      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: temurin
          java-version: 21.0.6

      # Set up the node environment
      # Version 20.18.0 is the recommended version for solo.
      - name: Setup NodeJS Environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20.18.0

      # Set up the gradle environment
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@06832c7b30a0129d7fb559bcc6e43d26f6374244 # v4.3.1
        with:
          cache-read-only: false

      # Build the hiero-consensus-node artifacts
      - name: Build hiero-consensus-node
        run: ${GRADLE_EXEC} assemble
        working-directory: ${{ github.workspace }}

      # Set up the npm dependencies and cache
      - name: Install NodeJS Dependencies
        run: |
          npm install --prefer-offline --no-audit --progress=false
          npm cache clean --force
        working-directory: platform-sdk/regression

      # Install solo and configure to use the artifacts from
      # the hiero-consensus-node build
      - name: Install Solo
        run: npm install -g @hashgraph/solo@0.36.0-alpha.2

      # Set up kind; needed for configuring the solo environment
      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          install_only: true
          node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
          version: v0.26.0
          kubectl_version: v1.31.4
          verbosity: 3
          wait: 120s

      # Pull in the docker images needed for the TCK tests
      - name: Pull JS TCK Server
        run: docker pull ivaylogarnev/js-tck-server-amd:latest

      - name: Pull TCK Client
        run: docker pull ivaylogarnev/hiero-tck-client:latest

      # Set up solo
      - name: Configure and run solo
        run: |
          kind create cluster -n "${{ env.SOLO_CLUSTER_NAME }}"
          solo init
          solo cluster-ref connect --cluster-ref kind-${{ env.SOLO_CLUSTER_NAME }} --context kind-${{ env.SOLO_CLUSTER_NAME }}
          solo deployment create -n "${{ env.SOLO_NAMESPACE }}" --deployment "${{ env.SOLO_DEPLOYMENT }}"
          solo deployment add-cluster --deployment "${{ env.SOLO_DEPLOYMENT }}" --cluster-ref kind-${{ env.SOLO_CLUSTER_NAME }} --num-consensus-nodes 2
          solo node keys --gossip-keys --tls-keys -i node1,node2 --deployment "${{ env.SOLO_DEPLOYMENT }}"
          solo cluster-ref setup -s "${{ env.SOLO_CLUSTER_SETUP_NAMESPACE }}"
          solo network deploy -i node1,node2 --deployment "${{ env.SOLO_DEPLOYMENT }}"
          solo node setup -i node1,node2 --deployment "${{ env.SOLO_DEPLOYMENT }}" --local-build-path ./hedera-node/data
          solo node start -i node1,node2 --deployment "${{ env.SOLO_DEPLOYMENT }}"
          solo mirror-node deploy --deployment "${{ env.SOLO_DEPLOYMENT }}" --cluster-ref kind-${{ env.SOLO_CLUSTER_NAME }}
          
          nohup kubectl port-forward svc/haproxy-node1-svc -n "${{ env.SOLO_NAMESPACE }}" 50211:50211 > /dev/null 2>&1 &
          nohup kubectl port-forward svc/haproxy-node1-svc -n "${{ env.SOLO_NAMESPACE }}" 50212:50212 > /dev/null 2>&1 &
          nohup kubectl port-forward svc/mirror-rest -n ${{ env.SOLO_NAMESPACE }} 5551:5551 > /dev/null 2>&1 &
          nohup kubectl port-forward svc/mirror-rest-java -n ${{ env.SOLO_NAMESPACE }} 8084:8084 > /dev/null 2>&1 &

        working-directory: ${{ github.workspace }}

      # Start the TCK server
      - name: Start tck-server in background
        run: |
          TEST=$(docker compose -f ./docker-compose.yml up -d tck-server)
        working-directory: platform-sdk/regression # required

      - name: Wait for TCK server
        run: |
          echo "Waiting for TCK server on port 8544..."
          until bash -c 'exec 3>/dev/tcp/localhost/8544'; do
            echo "Still waiting..."
            sleep 1
          done
          echo "TCK server is ready!"

      # Run the TCK tests
      - name: Run TCK tests
        run: docker run --network host -e JSON_RPC_SERVER_URL=http://host.docker.internal:8544 ivaylogarnev/hiero-tck-client

      # Stop the TCK server
      - name: Stop tck-server
        if: ${{ always() }}
        run: docker compose -f ./docker-compose.yml down
        working-directory: platform-sdk/regression

      # Stop the solo nodes
      - name: Stop solo
        if: ${{ always() }}
        run: |
          solo node stop -i node1,node2 --deployment "${{ env.SOLO_DEPLOYMENT }}"
          solo mirror-node deploy --deployment "${{ env.SOLO_DEPLOYMENT }}" --cluster-ref kind-${{ env.SOLO_CLUSTER_NAME }}
