replicas: 1

resources:
  requests:
  limits:
    cpu: 8
    memory: 20Gi
  requests:
    cpu: 6
    memory: 18Gi

nodeSelector:
  solo.hashgraph.io/role: "auxiliary-services"
  solo.hashgraph.io/owner: "%NETWORK_OWNER%"
  solo.hashgraph.io/network-id: "%NETWORK_ID%"
tolerations:
  - key: "solo.hashgraph.io/role"
    operator: "Equal"
    value: "auxiliary-services"
    effect: "NoSchedule"
  - key: "solo.hashgraph.io/owner"
    operator: "Equal"
    value: "%NETWORK_OWNER%"
    effect: "NoSchedule"
  - key: "solo.hashgraph.io/network-id"
    operator: "Equal"
    value: "%NETWORK_ID%"
    effect: "NoSchedule"

blockNode:
  # if blank will use same as AppVersion of chart.
  version: ""
  config:
    # Add any additional env configuration here
    # key: value
    JAVA_TOOL_OPTIONS: "-Djava.util.logging.config.file=/opt/hiero/block-node/logs/config/logging.properties"
    JAVA_OPTS: "-Xms16G -Xmx16G"
    # PRODUCER_TYPE: "NO_OP"
    # PERSISTENCE_STORAGE_TYPE: "NO_OP"
    # VERIFICATION_TYPE: "NO_OP"
    # MEDIATOR_TYPE: "NO_OP"
    MEDIATOR_RING_BUFFER_SIZE: "1024"
    MESSAGING_BLOCK_NOTIFICATION_QUEUE_SIZE: "16"

  persistence:
    archive:
      # If false, the chart expects an externally provided PVC
      create: true
      # Name of the externally provided PVC
      existingClaim: ""
      # Name of the subPath in the PVC to mount to mountPath in the container
      subPath: "archive-data"
      # If create is true, the following values are used to create the PVC
      # should match PERSISTENCE_STORAGE_ARCHIVE_ROOT_PATH, leave as is for default.
      mountPath: "/opt/hiero/block-node/data/historic"
      size: 10Gi
      # Optionally add a storage class name if needed
      storageClass: "local-path"
    logging:
      # If false, the chart expects an externally provided PVC
      create: true
      # Name of the externally provided PVC
      existingClaim: ""
      # Name of the subPath in the PVC to mount to mountPath in the container
      subPath: "logging-data"
      # If create is true, the following values are used to create the PVC
      mountPath: "/opt/hiero/block-node/logs"
      size: 10Gi
      # Optionally add a storage class name if needed
      storageClass: "local-path"
    live:
      # If false, the chart expects an externally provided PVC
      create: true
      # Name of the externally provided PVC
      existingClaim: ""
      # Name of the subPath in the PVC to mount to mountPath in the container
      subPath: "live-data"
      # If create is true, the following values are used to create the PVC
      # should match PERSISTENCE_STORAGE_LIVE_ROOT_PATH, leave as is for default.
      mountPath: "/opt/hiero/block-node/data/live"
      size: 10Gi
      # Optionally add a storage class name if needed
      storageClass: "local-path"
    unverified:
      # unverified does a hard-coded emptyDir and is ephemeral, however needs to be mounted
      # this does not create a PVC.
      # should match PERSISTENCE_STORAGE_UNVERIFIED_ROOT_PATH, leave as is for default.
      mountPath: "/opt/hiero/block-node/data/unverified"
  logs:
    # Available Levels are (from most verbose to least verbose):
    # ALL FINEST FINER FINE CONFIG INFO WARNING SEVERE OFF
    level: "INFO"
    configMountPath: "/opt/hiero/block-node/logs/config"
    loggingProperties:
      org.hiero.block.level: "FINEST"
      io.helidon.webserver.level: "INFO"
      io.helidon.webserver.access.level: "INFO"
      io.helidon.config.level: "SEVERE"
      io.helidon.security.level: "INFO"
      io.helidon.common.level: "INFO"
      handlers: "java.util.logging.ConsoleHandler, java.util.logging.FileHandler"
      java.util.logging.ConsoleHandler.level: "FINE"
      java.util.logging.ConsoleHandler.formatter: "java.util.logging.SimpleFormatter"
      java.util.logging.FileHandler.pattern: "/opt/hiero/block-node/logs/blocknode-%g.log"
      java.util.logging.FileHandler.append: "true"
      java.util.logging.FileHandler.limit: "5_000_000"
      java.util.logging.FileHandler.count: "5"
      java.util.logging.FileHandler.level: "FINE"
      java.util.logging.FileHandler.formatter: "java.util.logging.SimpleFormatter"
      ################################################################################
      # SimpleFormatter single-line format configuration
      ################################################################################
      # The format syntax uses java.util.Formatter.
      # The parameters are:
      #   %1$ - date/time (java.util.Date)
      #   %2$ - source (usually class and method)
      #   %3$ - logger?s name
      #   %4$ - log level
      #   %5$ - log message
      #   %6$ - throwable trace
      java.util.logging.SimpleFormatter.format: "%TF %<TT.%<TL%<Tz %4$-7s [%2$s] %5$s%6$s%n"
      io.helidon.level: "INFO"
      com.sun.net.httpserver.level: "WARNING"
      com.sun.net.httpserver.ServerImpl.level: "WARNING"
      com.sun.net.httpserver.ExchangeImpl.level: "WARNING"
